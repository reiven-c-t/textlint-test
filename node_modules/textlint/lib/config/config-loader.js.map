{"version":3,"sources":["../../src/config/config-loader.js"],"names":["load","rcConfigLoader","require","interopRequire","configFilePath","configFileName","moduleResolver","modulePath","resolveConfigPackageName","error","defaultExtension"],"mappings":"AAAA;AACA;;;;;kBAGwBA,I;AAFxB,IAAMC,iBAAiBC,QAAQ,kBAAR,CAAvB;AACA,IAAMC,iBAAiBD,QAAQ,iBAAR,CAAvB;AACe,SAASF,IAAT,CAAcI,cAAd,QAAgE;AAAA,QAAjCC,cAAiC,QAAjCA,cAAiC;AAAA,QAAjBC,cAAiB,QAAjBA,cAAiB;;AAC3E;AACA,QAAIF,cAAJ,EAAoB;AAChB,YAAI;AACA,gBAAMG,aAAaD,eAAeE,wBAAf,CAAwCJ,cAAxC,CAAnB;AACA,mBAAOD,eAAeI,UAAf,CAAP;AACH,SAHD,CAGE,OAAOE,KAAP,EAAc;AACZ;AACH;AACJ;AACD;AACA,WAAOR,eAAeI,cAAf,EAA+B;AAClCA,wBAAgBD,cADkB;AAElCM,0BAAkB,CAAC,OAAD,EAAU,KAAV,EAAiB,MAAjB;AAFgB,KAA/B,CAAP;AAIH","file":"config-loader.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst rcConfigLoader = require(\"rc-config-loader\");\nconst interopRequire = require(\"interop-require\");\nexport default function load(configFilePath, {configFileName, moduleResolver}) {\n    // if specify Config module, use it \n    if (configFilePath) {\n        try {\n            const modulePath = moduleResolver.resolveConfigPackageName(configFilePath);\n            return interopRequire(modulePath);\n        } catch (error) {\n            // not found config module\n        }\n    }\n    // auto or specify path to config file\n    return rcConfigLoader(configFileName, {\n        configFileName: configFilePath,\n        defaultExtension: [\".json\", \".js\", \".yml\"]\n    });\n}\n"]}