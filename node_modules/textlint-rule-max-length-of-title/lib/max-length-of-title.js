'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _lodash = require('lodash');

var defaultOptions = {
  '#': 32,
  'zenkakuBase': false
};

exports['default'] = function (context) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  options = (0, _lodash.assign)({}, defaultOptions, options);
  var Syntax = context.Syntax;
  var getSource = context.getSource;
  var report = context.report;
  var RuleError = context.RuleError;

  return _defineProperty({}, Syntax.Header, function (node) {
    return new Promise(function (resolve, reject) {
      var match = (0, _lodash.trimLeft)(getSource(node)).match(/^([#]+)([^#]*)$/);
      var title = (0, _lodash.trimLeft)(match[2]);
      var limit = options[match[1]];

      var length = options.zenkakuBase ? zenkakuBaseLength(title) : title.length;

      if (limit < length) {
        report(node, new RuleError(getMessage(title, limit, options.lang)));
      }

      resolve();
    });
  });
};

function zenkakuBaseLength(text) {
  var zenkaku = text.replace(/[\x20-\x7E]/g, '');
  return zenkaku.length + Math.ceil((text.length - zenkaku.length) / 2);
}

function getMessage(text, limit) {
  var lang = arguments.length <= 2 || arguments[2] === undefined ? 'en' : arguments[2];

  switch (lang) {
    case 'ja':
      return '「' + text + '」が' + limit + '文字を超えています。';
    default:
      return '"' + text + '" is over ' + limit;
  }
}
module.exports = exports['default'];
//# sourceMappingURL=max-length-of-title.js.map