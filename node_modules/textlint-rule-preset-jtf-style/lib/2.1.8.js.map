{"version":3,"sources":["../src/2.1.8.js"],"names":["toHankaku","string","convert","toString","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","text","matchRegExp","forEach","index","match","fix","replaceTextRange","length","linter"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;;AAMA;;AACA;;;;AACA;;;;;;AACA,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACvB,WAAO,oBAAKA,MAAL,EAAaC,OAAb,CAAqB,IAArB,EAA2B,IAA3B,EAAiCC,QAAjC,EAAP;AACH;AACD,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AAAA,QAClBC,MADkB,GAC6BD,OAD7B,CAClBC,MADkB;AAAA,QACVC,SADU,GAC6BF,OAD7B,CACVE,SADU;AAAA,QACCC,MADD,GAC6BH,OAD7B,CACCG,MADD;AAAA,QACSC,KADT,GAC6BJ,OAD7B,CACSI,KADT;AAAA,QACgBC,SADhB,GAC6BL,OAD7B,CACgBK,SADhB;;AAEvB,+BACKJ,OAAOK,GADZ,YACiBC,IADjB,EACsB;AACd,YAAI,CAAC,iCAAkBA,IAAlB,EAAwBP,OAAxB,CAAL,EAAuC;AACnC;AACH;AACD,YAAMQ,OAAOH,UAAUE,IAAV,CAAb;AACA,YAAME,cAAc,UAApB;AACA,8CAAqBD,IAArB,EAA2BC,WAA3B,EAAwCC,OAAxC,CAAgD,iBAAS;AAAA,gBAC9CC,KAD8C,GAC/BC,KAD+B,CAC9CD,KAD8C;AAAA,gBACvCH,IADuC,GAC/BI,KAD+B,CACvCJ,IADuC;;AAErDL,mBAAOI,IAAP,EAAa,IAAIL,SAAJ,CAAc,kBAAd,EAAkC;AAC3CS,uBAAOA,KADoC;AAE3CE,qBAAKT,MAAMU,gBAAN,CAAuB,CAACH,KAAD,EAAQA,QAAQH,KAAKO,MAArB,CAAvB,EAAqDpB,UAAUa,IAAV,CAArD;AAFsC,aAAlC,CAAb;AAIH,SAND;AAOH,KAdL;AAgBH;kBACc;AACXQ,YAAQjB,QADG;AAEXK,WAAOL;AAFI,C","file":"2.1.8.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n2.1.8.算用数字\n算用数字は「半角」で表記します。\n用途によっては全角を許容します。\nただし、表記をできるだけ統一するため、特別な理由がない限り半角での表記を原則とします。\n */\nimport {isUserWrittenNode} from \"./util/node-util\";\nimport moji from \"moji\";\nimport {matchCaptureGroupAll} from \"match-index\";\nfunction toHankaku(string) {\n    return moji(string).convert('ZE', 'HE').toString();\n}\nfunction reporter(context) {\n    let {Syntax, RuleError, report, fixer, getSource} = context;\n    return {\n        [Syntax.Str](node){\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const text = getSource(node);\n            const matchRegExp = /([０-９]+)/;\n            matchCaptureGroupAll(text, matchRegExp).forEach(match => {\n                const {index, text} = match;\n                report(node, new RuleError(\"算用数字は「半角」で表記します。\", {\n                    index: index,\n                    fix: fixer.replaceTextRange([index, index + text.length], toHankaku(text))\n                }));\n            });\n        }\n    };\n}\nexport default {\n    linter: reporter,\n    fixer: reporter\n}"]}