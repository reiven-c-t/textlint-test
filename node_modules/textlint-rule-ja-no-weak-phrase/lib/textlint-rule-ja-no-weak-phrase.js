// LICENSE : MIT
"use strict";

var _dict = require("./dict");

var _dict2 = _interopRequireDefault(_dict);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var tokenize = require("kuromojin").tokenize;

var createTokenMatcher = require("morpheme-match");
module.exports = function (context) {
    var Syntax = context.Syntax,
        RuleError = context.RuleError,
        report = context.report,
        getSource = context.getSource;

    var matcherList = _dict2.default.map(function (dict) {
        return {
            matcher: createTokenMatcher(dict["tokens"]),
            message: dict["message"]
        };
    });
    return _defineProperty({}, Syntax.Str, function (node) {
        var text = getSource(node);
        return tokenize(text).then(function (currentTokens) {
            currentTokens.forEach(function (token) {
                matcherList.forEach(function (_ref) {
                    var matcher = _ref.matcher,
                        message = _ref.message;

                    var _matcher = matcher(token),
                        match = _matcher.match,
                        tokens = _matcher.tokens;

                    if (!match) {
                        return;
                    }
                    var firstToken = tokens[0];
                    report(node, new RuleError(message, {
                        index: firstToken.word_position - 1
                    }));
                });
            });
        });
    });
};
//# sourceMappingURL=textlint-rule-ja-no-weak-phrase.js.map