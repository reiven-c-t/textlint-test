{"version":3,"sources":["../../src/config/plugin-loader.js"],"names":["mapRulesConfig","loadRulesConfig","loadAvailableExtensions","interopRequire","require","ObjectAssign","debug","assert","rulesConfig","pluginName","mapped","undefined","createMappedObject","pluginNames","moduleResolver","pluginRulesConfig","forEach","pkgPath","resolvePluginPackageName","plugin","hasOwnProperty","availableExtensions","Processor","push"],"mappings":"AAAA;AACA;;;;;;;;QAMgBA,c,GAAAA,c;QAcAC,e,GAAAA,e;QAeAC,uB,GAAAA,uB;;AA9BhB;;;;;;;;AAJA,IAAMC,iBAAiBC,QAAQ,iBAAR,CAAvB;AACA,IAAMC,eAAeD,QAAQ,eAAR,CAArB;AACA,IAAME,QAAQF,QAAQ,OAAR,EAAiB,wBAAjB,CAAd;AACA,IAAMG,SAASH,QAAQ,QAAR,CAAf;AAEO,SAASJ,cAAT,CAAwBQ,WAAxB,EAAqCC,UAArC,EAAiD;AACpD,QAAMC,SAAS,EAAf;AACA,QAAIF,gBAAgBG,SAAhB,IAA6B,QAAOH,WAAP,yCAAOA,WAAP,OAAuB,QAAxD,EAAkE;AAC9D,eAAOE,MAAP;AACH;AACD,WAAO,+BAAqBE,kBAArB,CAAwCJ,WAAxC,EAAqDC,UAArD,CAAP;AACH;AACD;AACA;;;;;;AAMO,SAASR,eAAT,GAA2D;AAAA,QAAlCY,WAAkC,uEAApB,EAAoB;AAAA,QAAhBC,cAAgB;;AAC9D,QAAMC,oBAAoB,EAA1B;AACAF,gBAAYG,OAAZ,CAAoB,sBAAc;AAC9B,YAAMC,UAAUH,eAAeI,wBAAf,CAAwCT,UAAxC,CAAhB;AACA,YAAMU,SAAShB,eAAec,OAAf,CAAf;AACA,YAAI,CAACE,OAAOC,cAAP,CAAsB,aAAtB,CAAL,EAA2C;AACvC;AACH;AACDd,cAASG,UAAT;AACA;AACAJ,qBAAaU,iBAAb,EAAgCf,eAAemB,OAAOX,WAAtB,EAAmCC,UAAnC,CAAhC;AACH,KATD;AAUA,WAAOM,iBAAP;AACH;;AAEM,SAASb,uBAAT,GAAmE;AAAA,QAAlCW,WAAkC,uEAApB,EAAoB;AAAA,QAAhBC,cAAgB;;AACtE,QAAMO,sBAAsB,EAA5B;AACAR,gBAAYG,OAAZ,CAAoB,sBAAc;AAC9B,YAAMC,UAAUH,eAAeI,wBAAf,CAAwCT,UAAxC,CAAhB;AACA,YAAMU,SAAShB,eAAec,OAAf,CAAf;AACA,YAAI,CAACE,OAAOC,cAAP,CAAsB,WAAtB,CAAL,EAAyC;AACrC;AACH;AACD,YAAME,YAAYH,OAAOG,SAAzB;AACAhB,cAASG,UAAT;AACAF,eAAO,OAAOe,UAAUD,mBAAjB,KAAyC,UAAhD,EAA4D,uDAA5D;AACAA,4BAAoBE,IAApB,+CAA4BD,UAAUD,mBAAV,EAA5B;AACH,KAVD;AAWA,WAAOA,mBAAP;AACH","file":"plugin-loader.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst interopRequire = require(\"interop-require\");\nconst ObjectAssign = require(\"object-assign\");\nconst debug = require(\"debug\")(\"textlint:plugin-loader\");\nconst assert = require(\"assert\");\nimport TextLintModuleMapper from \"../engine/textlint-module-mapper\";\nexport function mapRulesConfig(rulesConfig, pluginName) {\n    const mapped = {};\n    if (rulesConfig === undefined || typeof rulesConfig !== \"object\") {\n        return mapped;\n    }\n    return TextLintModuleMapper.createMappedObject(rulesConfig, pluginName);\n}\n// load rulesConfig from plugins\n/**\n *\n * @param pluginNames\n * @param {TextLintModuleResolver} moduleResolver\n * @returns {{}}\n */\nexport function loadRulesConfig(pluginNames = [], moduleResolver) {\n    const pluginRulesConfig = {};\n    pluginNames.forEach(pluginName => {\n        const pkgPath = moduleResolver.resolvePluginPackageName(pluginName);\n        const plugin = interopRequire(pkgPath);\n        if (!plugin.hasOwnProperty(\"rulesConfig\")) {\n            return;\n        }\n        debug(`${pluginName} has rulesConfig`);\n        // set config of <rule> to \"<plugin>/<rule>\"\n        ObjectAssign(pluginRulesConfig, mapRulesConfig(plugin.rulesConfig, pluginName));\n    });\n    return pluginRulesConfig;\n}\n\nexport function loadAvailableExtensions(pluginNames = [], moduleResolver) {\n    const availableExtensions = [];\n    pluginNames.forEach(pluginName => {\n        const pkgPath = moduleResolver.resolvePluginPackageName(pluginName);\n        const plugin = interopRequire(pkgPath);\n        if (!plugin.hasOwnProperty(\"Processor\")) {\n            return;\n        }\n        const Processor = plugin.Processor;\n        debug(`${pluginName} has Processor`);\n        assert(typeof Processor.availableExtensions === \"function\", \"Processor.availableExtensions() should be implemented\");\n        availableExtensions.push(...Processor.availableExtensions());\n    });\n    return availableExtensions;\n}\n"]}