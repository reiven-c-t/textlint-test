// LICENSE : MIT
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getTokenizer = getTokenizer;
exports.tokenize = tokenize;

var _Deferred = require("./Deferred");

var _Deferred2 = _interopRequireDefault(_Deferred);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var path = require("path");
var kuromoji = require("kuromoji");

var deferred = new _Deferred2.default();
var getNodeModuleDirPath = function getNodeModuleDirPath() {
    var kuromojiDir = path.dirname(require.resolve("kuromoji"));
    return path.join(kuromojiDir, "..", "dict");
};
// cache for tokenizer
var _tokenizer = null;
// lock boolean
var isLoading = false;
function getTokenizer() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? { dicPath: getNodeModuleDirPath() } : arguments[0];

    if (_tokenizer) {
        return Promise.resolve(_tokenizer);
    }
    if (isLoading) {
        return deferred.promise;
    }
    isLoading = true;
    // load dict
    kuromoji.builder(options).build(function (err, tokenizer) {
        if (err) {
            return deferred.reject(err);
        }
        _tokenizer = tokenizer;
        deferred.resolve(tokenizer);
    });
    return deferred.promise;
}
function tokenize(text) {
    return getTokenizer().then(function (tokenizer) {
        return tokenizer.tokenizeForSentence(text);
    });
}
//# sourceMappingURL=kuromojin.js.map