{"version":3,"sources":["../../src/task/fixer-task.js"],"names":["debug","require","TextLintCoreTask","config","ruleCreatorSet","filterRuleCreatorSet","sourceCode","_setupRules","startTraverser","textLintConfig","report","createReporter","ignoreReport","createIgnoreReporter","withoutDuplicated","forEach","ruleId","rule","ruleConfig","ruleContext","ruleModule","tryToAddListenRule"],"mappings":"AAAA;AACA;;;;;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;;;;;AACA,IAAMA,QAAQC,QAAQ,OAAR,EAAiB,2BAAjB,CAAd;;IACqBC,gB;;;AACjB;;;;;;AAMA,oCAAwE;AAAA,YAA3DC,MAA2D,QAA3DA,MAA2D;AAAA,YAAnDC,cAAmD,QAAnDA,cAAmD;AAAA,YAAnCC,oBAAmC,QAAnCA,oBAAmC;AAAA,YAAbC,UAAa,QAAbA,UAAa;;AAAA;;AAAA;;AAEpE,cAAKH,MAAL,GAAcA,MAAd;AACA,cAAKC,cAAL,GAAsBA,cAAtB;AACA,cAAKC,oBAAL,GAA4BA,oBAA5B;AACA,cAAKC,UAAL,GAAkBA,UAAlB;AACA,cAAKC,WAAL;AANoE;AAOvE;;;;gCAEO;AACJ,iBAAKC,cAAL,CAAoB,KAAKF,UAAzB;AACH;;;sCAEa;AAAA;;AACV;AACA,gBAAMG,iBAAiB,KAAKN,MAA5B;AACA,gBAAMG,aAAa,KAAKA,UAAxB;AACA,gBAAMI,SAAS,KAAKC,cAAL,CAAoBL,UAApB,CAAf;AACA,gBAAMM,eAAe,KAAKC,oBAAL,CAA0BP,UAA1B,CAArB;AACA;AACA;AACA;AACA,gBAAMF,iBAAiB,KAAKA,cAAL,CAAoBU,iBAApB,EAAvB;AACAd,kBAAM,gBAAN,EAAwBI,cAAxB;AACAA,2BAAeW,OAAf,CAAuB,iBAAgC;AAAA,oBAA9BC,MAA8B,SAA9BA,MAA8B;AAAA,oBAAtBC,IAAsB,SAAtBA,IAAsB;AAAA,oBAAhBC,UAAgB,SAAhBA,UAAgB;;AACnD,oBAAMC,cAAc,0BAAgB;AAChCH,kCADgC;AAEhCV,0CAFgC;AAGhCI,kCAHgC;AAIhCE,8CAJgC;AAKhCH,kDALgC;AAMhCS;AANgC,iBAAhB,CAApB;AAQA,oBAAME,aAAa,iCAASH,IAAT,CAAnB;AACA,uBAAKI,kBAAL,CAAwBD,UAAxB,EAAoCD,WAApC,EAAiDD,UAAjD;AACH,aAXD;AAYA;AACAlB,kBAAM,sBAAN,EAA8B,KAAKK,oBAAnC;AACA,iBAAKA,oBAAL,CAA0BU,OAA1B,CAAkC,iBAAgC;AAAA,oBAA9BC,MAA8B,SAA9BA,MAA8B;AAAA,oBAAtBC,IAAsB,SAAtBA,IAAsB;AAAA,oBAAhBC,UAAgB,SAAhBA,UAAgB;;AAC9D,oBAAMC,cAAc,gCAAsB;AACtCH,kCADsC;AAEtCV,0CAFsC;AAGtCM,8CAHsC;AAItCH;AAJsC,iBAAtB,CAApB;AAMA;AACA,oBAAMW,aAAa,kCAAUH,IAAV,CAAnB;AACA,uBAAKI,kBAAL,CAAwBD,UAAxB,EAAoCD,WAApC,EAAiDD,UAAjD;AACH,aAVD;AAWH;;;;;;kBAxDgBhB,gB","file":"fixer-task.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport CoreTask from \"./textlint-core-task\";\nimport {getFixer, getFilter} from \"../core/rule-creator-helper\";\nimport RuleContext from \"../core/rule-context\";\nimport FilterRuleContext from \"../core/filter-rule-context\";\nconst debug = require(\"debug\")(\"textlint:TextLintCoreTask\");\nexport default class TextLintCoreTask extends CoreTask {\n    /**\n     * @param {Config} config\n     * @param {RuleCreatorSet} ruleCreatorSet rules and config set\n     * @param {RuleCreatorSet} filterRuleCreatorSet filter rules and config set\n     * @param {SourceCode} sourceCode\n     */\n    constructor({config, ruleCreatorSet, filterRuleCreatorSet, sourceCode}) {\n        super();\n        this.config = config;\n        this.ruleCreatorSet = ruleCreatorSet;\n        this.filterRuleCreatorSet = filterRuleCreatorSet;\n        this.sourceCode = sourceCode;\n        this._setupRules();\n    }\n\n    start() {\n        this.startTraverser(this.sourceCode);\n    }\n\n    _setupRules() {\n        // rule\n        const textLintConfig = this.config;\n        const sourceCode = this.sourceCode;\n        const report = this.createReporter(sourceCode);\n        const ignoreReport = this.createIgnoreReporter(sourceCode);\n        // setup \"rules\" field\n        // filter duplicated rules for improving experience\n        // see https://github.com/textlint/textlint/issues/219\n        const ruleCreatorSet = this.ruleCreatorSet.withoutDuplicated();\n        debug(\"ruleCreatorSet\", ruleCreatorSet);\n        ruleCreatorSet.forEach(({ruleId, rule, ruleConfig}) => {\n            const ruleContext = new RuleContext({\n                ruleId,\n                sourceCode,\n                report,\n                ignoreReport,\n                textLintConfig,\n                ruleConfig\n            });\n            const ruleModule = getFixer(rule);\n            this.tryToAddListenRule(ruleModule, ruleContext, ruleConfig);\n        });\n        // setup \"filters\" field\n        debug(\"filterRuleCreatorSet\", this.filterRuleCreatorSet);\n        this.filterRuleCreatorSet.forEach(({ruleId, rule, ruleConfig}) => {\n            const ruleContext = new FilterRuleContext({\n                ruleId,\n                sourceCode,\n                ignoreReport,\n                textLintConfig\n            });\n            // \"filters\" rule is the same with \"rules\"\n            const ruleModule = getFilter(rule);\n            this.tryToAddListenRule(ruleModule, ruleContext, ruleConfig);\n        });\n    }\n}\n"]}