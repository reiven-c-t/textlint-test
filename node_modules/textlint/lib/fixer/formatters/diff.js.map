{"version":3,"sources":["../../../src/fixer/formatters/diff.js"],"names":["fs","require","isFile","jsdiff","chalk","pluralize","word","count","isModified","part","removed","added","addMarkEachLine","mark","text","length","lines","split","markedLines","filter","line","map","join","module","exports","results","options","enabled","color","undefined","output","totalFixed","errors","summaryColor","greenColor","forEach","result","filePath","messages","applyingMessages","remainingMessages","underline","originalContent","readFileSync","diff","diffLines","index","prevLine","nextLine","greyColor","value","lineColor","diffMark","bold"],"mappings":"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","file":"diff.js","sourcesContent":["\"use strict\";\nconst fs = require(\"fs\");\nconst isFile = require(\"is-file\");\nconst jsdiff = require(\"diff\");\nconst chalk = require(\"chalk\");\n/**\n * Given a word and a count, append an s if count is not one.\n * @param {string} word A word in its singular form.\n * @param {int} count A number controlling whether word should be pluralized.\n * @returns {string} The original word with an s on the end if count is not one.\n */\nfunction pluralize(word, count) {\n    return count === 1 ? word : word + \"s\";\n}\n\nfunction isModified(part) {\n    if (!part) {\n        return false;\n    }\n    return typeof part === \"object\" && (part.removed || part.added);\n}\nfunction addMarkEachLine(mark, text) {\n    if (text.length === 0) {\n        return \"\\n\";\n    }\n    const lines = text.split(\"\\n\");\n    const markedLines = lines.filter(line => line.length > 0).map(line => {\n        return mark + line;\n    });\n    return markedLines.join(\"\\n\") + \"\\n\";\n}\nmodule.exports = function (results, options) {\n    // default: true\n    chalk.enabled = options.color !== undefined ? options.color : true;\n    let output = \"\\n\";\n    let totalFixed = 0;\n    let errors = 0;\n    const summaryColor = \"yellow\";\n    const greenColor = \"green\";\n\n    results.forEach(function (result) {\n        const filePath = result.filePath;\n        const messages = result.applyingMessages;\n        // still error count\n        const remainingMessages = result.remainingMessages;\n        errors += remainingMessages.length;\n        totalFixed += messages.length;\n        if (messages.length === 0) {\n            return;\n        }\n        if (!isFile(filePath)) {\n            return;\n        }\n        output += chalk.underline(result.filePath) + \"\\n\";\n\n        const originalContent = fs.readFileSync(filePath, \"utf-8\");\n        const diff = jsdiff.diffLines(originalContent, result.output);\n\n        diff.forEach(function (part, index) {\n            const prevLine = diff[index - 1];\n            const nextLine = diff[index + 1];\n            if (!isModified(part) && part.count > 1) {\n                const greyColor = \"grey\";\n                /*\n                    <MODIFIED>\n                    first line\n                    ....\n                 */\n                if (isModified(prevLine)) {\n                    const lines = part.value.split(\"\\n\");\n                    output += chalk[greyColor](lines[0]) + \"\\n\";\n                }\n                output += chalk[greyColor](\"...\");\n                if (isModified(nextLine)) {\n                    const lines = part.value.split(\"\\n\");\n                    output += chalk[greyColor](lines[lines.length - 1]) + \"\\n\";\n                }\n                /*\n                    ...\n                    last line\n                    <MODIFIED>\n                 */\n                return;\n            }\n            // green for additions, red for deletions\n            // grey for common parts\n            let lineColor;\n            let diffMark = \"\";\n            if (part.added) {\n                lineColor = \"green\";\n                diffMark = \"+ \";\n            } else if (part.removed) {\n                lineColor = \"red\";\n                diffMark = \"- \";\n            } else {\n                lineColor = \"grey\";\n                diffMark = \"\";\n            }\n            output += chalk[lineColor](addMarkEachLine(diffMark, part.value));\n        });\n        output += \"\\n\\n\";\n    });\n\n    if (totalFixed > 0) {\n        output += chalk[greenColor].bold([\n            // http://www.fileformat.info/info/unicode/char/2714/index.htm\n            \"✔ Fixed \", totalFixed, pluralize(\" problem\", totalFixed), \"\\n\"\n        ].join(\"\"));\n    }\n\n    if (errors > 0) {\n        output += chalk[summaryColor].bold([\n            // http://www.fileformat.info/info/unicode/char/2716/index.htm\n            \"✖ Remaining \", errors, pluralize(\" problem\", errors), \"\\n\"\n        ].join(\"\"));\n    }\n\n    return totalFixed > 0 ? output : \"\";\n};\n"]}