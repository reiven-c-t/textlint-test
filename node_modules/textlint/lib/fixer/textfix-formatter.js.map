{"version":3,"sources":["../../src/fixer/textfix-formatter.js"],"names":["createFormatter","fs","require","path","tryResolve","interopRequire","isFile","debug","formatterConfig","formatterName","formatter","formatterPath","existsSync","resolve","process","cwd","builtinFormatterPath","join","__dirname","pkgPath","ex","Error","results"],"mappings":"AAAA;AACA;;;;;kBAOwBA,e;AANxB,IAAMC,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,aAAaF,QAAQ,aAAR,CAAnB;AACA,IAAMG,iBAAiBH,QAAQ,iBAAR,CAAvB;AACA,IAAMI,SAASJ,QAAQ,SAAR,CAAf;AACA,IAAMK,QAAQL,QAAQ,OAAR,EAAiB,4BAAjB,CAAd;AACe,SAASF,eAAT,CAAyBQ,eAAzB,EAA0C;AACrD,QAAMC,gBAAgBD,gBAAgBC,aAAtC;AACAF,UAAM,wBAAwBE,aAA9B;AACA,QAAIC,kBAAJ;AACA,QAAIC,sBAAJ;AACA,QAAIV,GAAGW,UAAH,CAAcH,aAAd,CAAJ,EAAkC;AAC9BE,wBAAgBF,aAAhB;AACH,KAFD,MAEO,IAAIR,GAAGW,UAAH,CAAcT,KAAKU,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4BN,aAA5B,CAAd,CAAJ,EAA+D;AAClEE,wBAAgBR,KAAKU,OAAL,CAAaC,QAAQC,GAAR,EAAb,EAA4BN,aAA5B,CAAhB;AACH,KAFM,MAEA;AACH,YAAMO,uBAAuBb,KAAKc,IAAL,CAAUC,SAAV,EAAqB,aAArB,EAAoCT,aAApC,IAAqD,KAAlF;AACA,YAAIH,OAAOU,oBAAP,CAAJ,EAAkC;AAC9BL,4BAAgBK,oBAAhB;AACH,SAFD,MAEO;AACH,gBAAMG,UAAUf,WAAW,wBAAwBK,aAAnC,KAAqDL,WAAWK,aAAX,CAArE;AACA,gBAAIU,OAAJ,EAAa;AACTR,gCAAgBQ,OAAhB;AACH;AACJ;AACJ;AACD,QAAI;AACAT,oBAAYL,eAAeM,aAAf,CAAZ;AACH,KAFD,CAEE,OAAOS,EAAP,EAAW;AACT,cAAM,IAAIC,KAAJ,+BAAsCZ,aAAtC,+DAEZW,EAFY,CAAN;AAGH;AACDb,UAAM,oBAAoBI,aAA1B;AACA,WAAO,UAAUW,OAAV,EAAmB;AACtB,eAAOZ,UAAUY,OAAV,EAAmBd,eAAnB,CAAP;AACH,KAFD;AAGH","file":"textfix-formatter.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst tryResolve = require(\"try-resolve\");\nconst interopRequire = require(\"interop-require\");\nconst isFile = require(\"is-file\");\nconst debug = require(\"debug\")(\"textlint:textfix-formatter\");\nexport default function createFormatter(formatterConfig) {\n    const formatterName = formatterConfig.formatterName;\n    debug(\"try formatterName: \" + formatterName);\n    let formatter;\n    let formatterPath;\n    if (fs.existsSync(formatterName)) {\n        formatterPath = formatterName;\n    } else if (fs.existsSync(path.resolve(process.cwd(), formatterName))) {\n        formatterPath = path.resolve(process.cwd(), formatterName);\n    } else {\n        const builtinFormatterPath = path.join(__dirname, \"formatters/\", formatterName) + \".js\";\n        if (isFile(builtinFormatterPath)) {\n            formatterPath = builtinFormatterPath;\n        } else {\n            const pkgPath = tryResolve(\"textlint-formatter-\" + formatterName) || tryResolve(formatterName);\n            if (pkgPath) {\n                formatterPath = pkgPath;\n            }\n        }\n    }\n    try {\n        formatter = interopRequire(formatterPath);\n    } catch (ex) {\n        throw new Error(`Could not find formatter ${formatterName}\nSee https://github.com/textlint/textlint/issues/148\n${ex}`);\n    }\n    debug(\"use formatter: \" + formatterPath);\n    return function (results) {\n        return formatter(results, formatterConfig);\n    };\n}\n"]}