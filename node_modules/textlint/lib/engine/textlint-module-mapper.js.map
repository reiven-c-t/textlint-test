{"version":3,"sources":["../../src/engine/textlint-module-mapper.js"],"names":["RuleSeparator","TextLintModuleMapper","pluginRules","prefixKey","entities","Object","keys","forEach","qualifiedRuleId","ruleId","ruleCreator","push","mapped","key"],"mappings":"AAAA;AACA;AACA;;;;AAIA;;;;;;;;;;AACA,IAAMA,gBAAgB,GAAtB;;IACqBC,oB;;;;;;;;AACjB;;;;;;;;uCAQsBC,W,EAAaC,S,EAAW;AAC1C,gBAAMC,WAAW,EAAjB;AACAC,mBAAOC,IAAP,CAAYJ,WAAZ,EAAyBK,OAAzB,CAAiC,kBAAU;AACvC,oBAAMC,kBAAkBL,YAAYH,aAAZ,GAA4BS,MAApD;AACA,oBAAMC,cAAcR,YAAYO,MAAZ,CAApB;AACAL,yBAASO,IAAT,CAAc,CAACH,eAAD,EAAkBE,WAAlB,CAAd;AACH,aAJD;AAKA,mBAAON,QAAP;AACH;;AAED;;;;;;;;;;2CAO0BF,W,EAAaC,S,EAAW;AAC9C,gBAAMS,SAAS,EAAf;AACAP,mBAAOC,IAAP,CAAYJ,WAAZ,EAAyBK,OAAzB,CAAiC,eAAO;AACpCK,uBAAUT,SAAV,SAAuBU,GAAvB,IAAgCX,YAAYW,GAAZ,CAAhC;AACH,aAFD;AAGA,mBAAOD,MAAP;AACH;;;;;;kBAhCgBX,oB","file":"textlint-module-mapper.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/**\n * This class is a helper to create mapping of rules and rulesConfig\n * Main purpose hide the RuleSeparator \"/\".\n */\n// The separator of `<plugin>/<rule>` \nconst RuleSeparator = \"/\";\nexport default class TextLintModuleMapper {\n    /**\n     * create entities from rules/rulesConfig and prefix\n     * entities is a array which contain [key, value]\n     * see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\n     * @param {Object} pluginRules an object is like \"rules\" or \"rulesConfig\" of plugin\n     * @param {string} prefixKey prefix key is plugin name or preset name\n     * @returns {[string, string][]}\n     */\n    static createEntities(pluginRules, prefixKey) {\n        const entities = [];\n        Object.keys(pluginRules).forEach(ruleId => {\n            const qualifiedRuleId = prefixKey + RuleSeparator + ruleId;\n            const ruleCreator = pluginRules[ruleId];\n            entities.push([qualifiedRuleId, ruleCreator]);\n        });\n        return entities;\n    }\n\n    /**\n     * create an object from rules/rulesConfig and prefix\n     * the object shape is { key: value, key2: value }\n     * @param {Object} pluginRules an object is like \"rules\" or \"rulesConfig\" of plugin\n     * @param {string} prefixKey prefix key is plugin name or preset name\n     * @returns {Object}\n     */\n    static createMappedObject(pluginRules, prefixKey) {\n        const mapped = {};\n        Object.keys(pluginRules).forEach(key => {\n            mapped[`${prefixKey}/${key}`] = pluginRules[key];\n        });\n        return mapped;\n    }\n}\n"]}