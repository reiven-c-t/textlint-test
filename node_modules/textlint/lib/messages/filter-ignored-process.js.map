{"version":3,"sources":["../../src/messages/filter-ignored-process.js"],"names":["filterMessages","isContainedRange","index","range","start","end","messages","lintingMessages","filter","message","type","lint","ignoreMessages","ignore","some","isInIgnoringRange","ignoreMessage","ignoringRuleId","ruleId"],"mappings":"AAAA;AACA;;;;;;;;kBAiBwBA,c;;AAhBxB;;;;;;AACA;;;;;;AAMA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAACC,KAAD,EAAQC,KAAR,EAAkB;AAAA,gCAClBA,KADkB;AAAA,QAChCC,KADgC;AAAA,QACzBC,GADyB;;AAEvC,WAAOD,SAASF,KAAT,IAAkBA,SAASG,GAAlC;AACH,CAHD;AAIA;;;;;AAKe,SAASL,cAAT,GAAuC;AAAA,QAAfM,QAAe,uEAAJ,EAAI;;AAClD,QAAMC,kBAAkBD,SAASE,MAAT,CAAgB,mBAAW;AAC/C,eAAOC,QAAQC,IAAR,KAAiB,sBAAYC,IAApC;AACH,KAFuB,CAAxB;AAGA,QAAMC,iBAAiBN,SAASE,MAAT,CAAgB,mBAAW;AAC9C,eAAOC,QAAQC,IAAR,KAAiB,sBAAYG,MAApC;AACH,KAFsB,CAAvB;AAGA;AACA,WAAON,gBAAgBC,MAAhB,CAAuB,mBAAW;AACrC,eAAO,CAACI,eAAeE,IAAf,CAAoB,yBAAiB;AACzC,gBAAMC,oBAAoBd,iBAAiBQ,QAAQP,KAAzB,EAAgCc,cAAcb,KAA9C,CAA1B;AACA,gBAAIY,qBAAqBC,cAAcC,cAAvC,EAAuD;AACnD;AACA,oBAAID,cAAcC,cAAd,KAAiC,GAArC,EAA0C;AACtC,2BAAO,IAAP;AACH;AACD,uBAAOR,QAAQS,MAAR,KAAmBF,cAAcC,cAAxC;AACH;AACD,mBAAOF,iBAAP;AACH,SAVO,CAAR;AAWH,KAZM,CAAP;AAaH","file":"filter-ignored-process.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport MessageType from \"../shared/type/MessageType\";\n/**\n * the `index` is in the `range` and return true.\n * @param {Number} index\n * @param {Number[]} range\n * @returns {boolean}\n */\nconst isContainedRange = (index, range) => {\n    const [start, end] = range;\n    return start <= index && index <= end;\n};\n/**\n * filter messages by ignore messages\n * @param {Object[]} messages\n * @returns {Object[]} filtered messages\n */\nexport default function filterMessages(messages = []) {\n    const lintingMessages = messages.filter(message => {\n        return message.type === MessageType.lint;\n    });\n    const ignoreMessages = messages.filter(message => {\n        return message.type === MessageType.ignore;\n    });\n    // if match, reject the message\n    return lintingMessages.filter(message => {\n        return !ignoreMessages.some(ignoreMessage => {\n            const isInIgnoringRange = isContainedRange(message.index, ignoreMessage.range);\n            if (isInIgnoringRange && ignoreMessage.ignoringRuleId) {\n                // \"*\" is wildcard that match any rule\n                if (ignoreMessage.ignoringRuleId === \"*\") {\n                    return true;\n                }\n                return message.ruleId === ignoreMessage.ignoringRuleId;\n            }\n            return isInIgnoringRange;\n        });\n    });\n}\n"]}