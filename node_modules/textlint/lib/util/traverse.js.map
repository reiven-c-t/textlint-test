{"version":3,"sources":["../../src/util/traverse.js"],"names":["fs","require","path","debug","walk","name","extensions","exclude","callback","stat","statSync","traverse","dir","stack","push","readdirSync","join","apply","forEach","file","filePath","concat","fileStat","isFile","indexOf","extname","isDirectory","pop","basename","module","exports","options","files"],"mappings":"AAAA;;;;AAIA;;AACA,IAAMA,KAAKC,QAAQ,IAAR,CAAX;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,QAAQF,QAAQ,OAAR,EAAiB,mBAAjB,CAAd;AACA;;;;;;;;;;AAUA,SAASG,IAAT,CAAcC,IAAd,EAAoBC,UAApB,EAAgCC,OAAhC,EAAyCC,QAAzC,EAAmD;AAC/C,QAAMC,OAAOT,GAAGU,QAAH,CAAYL,IAAZ,CAAb;;AAEA,aAASM,QAAT,CAAkBC,GAAlB,EAAuBC,KAAvB,EAA8B;AAC1BA,cAAMC,IAAN,CAAWF,GAAX;AACAZ,WAAGe,WAAH,CAAeb,KAAKc,IAAL,CAAUC,KAAV,CAAgBf,IAAhB,EAAsBW,KAAtB,CAAf,EAA6CK,OAA7C,CAAqD,gBAAQ;AACzD;AACA,gBAAIC,KAAK,CAAL,MAAY,GAAhB,EAAqB;AACjB;AACH;AACD,gBAAMC,WAAWlB,KAAKc,IAAL,CAAUC,KAAV,CAAgBf,IAAhB,EAAsBW,MAAMQ,MAAN,CAAa,CAACF,IAAD,CAAb,CAAtB,CAAjB;AACA,gBAAMG,WAAWtB,GAAGU,QAAH,CAAYU,QAAZ,CAAjB;AACA;AACA,gBAAIb,WAAWA,QAAQa,QAAR,CAAf,EAAkC;AAC9B;AACAjB,oCAAmBiB,QAAnB;AACA;AACH;AACD;AACA,gBAAIE,SAASC,MAAT,MAAqBjB,WAAWkB,OAAX,CAAmBtB,KAAKuB,OAAL,CAAaL,QAAb,CAAnB,IAA6C,CAAC,CAAvE,EAA0E;AACtEZ,yBAASY,QAAT;AACH,aAFD,MAEO,IAAIE,SAASI,WAAT,EAAJ,EAA4B;AAC/Bf,yBAASQ,IAAT,EAAeN,KAAf;AACH;AACJ,SAnBD;AAoBAA,cAAMc,GAAN;AACH;;AAED,QAAMC,WAAW1B,KAAK0B,QAAL,CAAcvB,IAAd,CAAjB;AACA;AACA,QAAIuB,aAAa,GAAb,IAAoBA,aAAa,IAAjC,IAAyCA,SAAS,CAAT,MAAgB,GAAzD,IAAgErB,WAAWA,QAAQF,IAAR,CAA/E,EAA8F;AAC1FF,4BAAmBE,IAAnB;AACA;AACH;AACD;AACA,QAAII,KAAKc,MAAL,EAAJ,EAAmB;AACf,YAAIjB,WAAWkB,OAAX,CAAmBtB,KAAKuB,OAAL,CAAapB,IAAb,CAAnB,IAAyC,CAAC,CAA9C,EAAiD;AAC7CG,qBAASH,IAAT;AACH;AACJ,KAJD,MAIO;AACHM,iBAASN,IAAT,EAAe,EAAf;AACH;AACJ;AACD;;;;;;;;AAQAwB,OAAOC,OAAP,GAAiB,SAASnB,QAAT,CAAkBoB,OAAlB,EAA2BvB,QAA3B,EAAqC;AAClD,QAAMwB,QAAQD,QAAQC,KAAtB;AACA,QAAMzB,UAAUwB,QAAQxB,OAAxB;AACA,QAAMD,aAAayB,QAAQzB,UAA3B;AACA0B,UAAMd,OAAN,CAAc,gBAAQ;AAClBd,aAAKe,IAAL,EAAWb,UAAX,EAAuBC,OAAvB,EAAgCC,QAAhC;AACH,KAFD;AAGH,CAPD","file":"traverse.js","sourcesContent":["/**\n * @fileoverview Simple directory traversal logic.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst debug = require(\"debug\")(\"textlint:traverse\");\n/**\n * Walks a path recursively calling the callback on each file.\n * @param {string} name The file or directory path.\n * @param {string[]} extensions The file extensions that should cause the callback\n *      to be called.\n * @param {Function} [exclude] The function to check if file/path should be excluded.\n * @param {Function} callback The function to call on each file.\n * @returns {void}\n * @private\n */\nfunction walk(name, extensions, exclude, callback) {\n    const stat = fs.statSync(name);\n\n    function traverse(dir, stack) {\n        stack.push(dir);\n        fs.readdirSync(path.join.apply(path, stack)).forEach(file => {\n            // skip all hidden things (dirs, files, links)\n            if (file[0] === \".\") {\n                return;\n            }\n            const filePath = path.join.apply(path, stack.concat([file]));\n            const fileStat = fs.statSync(filePath);\n            // if this file or directory is excluded from linting, skip over it.\n            if (exclude && exclude(filePath)) {\n                // console.log(\"Ignoring \" + filePath);\n                debug(`Ignoring ${ filePath }`);\n                return;\n            }\n            // only call callback for files with correct extensions\n            if (fileStat.isFile() && extensions.indexOf(path.extname(filePath)) > -1) {\n                callback(filePath);\n            } else if (fileStat.isDirectory()) {\n                traverse(file, stack);\n            }\n        });\n        stack.pop();\n    }\n\n    const basename = path.basename(name);\n    // don't ignore cases like 'textlint ./'\n    if (basename !== \".\" && basename !== \"..\" && basename[0] === \".\" || exclude && exclude(name)) {\n        debug(`Ignoring ${ name }`);\n        return;\n    }\n    // always call callback for any files that are passed on the command line\n    if (stat.isFile()) {\n        if (extensions.indexOf(path.extname(name)) > -1) {\n            callback(name);\n        }\n    } else {\n        traverse(name, []);\n    }\n}\n/**\n * Traverses multiple directories and calls a callback on each file.\n * @param {Object} options The option for the traversal.\n * param {string[]} options.files An array of file and directory paths to traverse.\n * param {Function} options.exclude The function to check if file/path should be excluded.\n * @param {Function} callback A function to call for each file.\n * @returns {void}\n */\nmodule.exports = function traverse(options, callback) {\n    const files = options.files;\n    const exclude = options.exclude;\n    const extensions = options.extensions;\n    files.forEach(file => {\n        walk(file, extensions, exclude, callback);\n    });\n};\n"]}