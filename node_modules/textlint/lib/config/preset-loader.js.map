{"version":3,"sources":["../../src/config/preset-loader.js"],"names":["mapRulesConfig","findRulesAndConfig","interopRequire","require","ObjectAssign","rulesConfig","presetName","mapped","undefined","createMappedObject","ruleNames","moduleResolver","presetRulesConfig","forEach","pkgPath","resolvePresetPackageName","ruleName","preset","hasOwnProperty","Error"],"mappings":"AAAA;AACA;;;;;;;;QAWgBA,c,GAAAA,c;kBAeQC,kB;;AAvBxB;;;;;;AAFA,IAAMC,iBAAiBC,QAAQ,iBAAR,CAAvB;AACA,IAAMC,eAAeD,QAAQ,eAAR,CAArB;;;AAGA;;;;;;AAMO,SAASH,cAAT,CAAwBK,WAAxB,EAAqCC,UAArC,EAAiD;AACpD,QAAMC,SAAS,EAAf;AACA;AACA,QAAIF,gBAAgBG,SAAhB,IAA6B,QAAOH,WAAP,yCAAOA,WAAP,OAAuB,QAAxD,EAAkE;AAC9D,eAAOE,MAAP;AACH;AACD,WAAO,+BAAqBE,kBAArB,CAAwCJ,WAAxC,EAAqDC,UAArD,CAAP;AACH;AACD;AACA;;;;;;AAMe,SAASL,kBAAT,GAA4D;AAAA,QAAhCS,SAAgC,uEAApB,EAAoB;AAAA,QAAhBC,cAAgB;;AACvE,QAAMC,oBAAoB,EAA1B;AACAF,cAAUG,OAAV,CAAkB,oBAAY;AAC1B,YAAMC,UAAUH,eAAeI,wBAAf,CAAwCC,QAAxC,CAAhB;AACA,YAAMC,SAASf,eAAeY,OAAf,CAAf;AACA,YAAI,CAACG,OAAOC,cAAP,CAAsB,OAAtB,CAAL,EAAqC;AACjC,kBAAM,IAAIC,KAAJ,CAAaH,QAAb,oBAAN;AACH;AACD,YAAI,CAACC,OAAOC,cAAP,CAAsB,aAAtB,CAAL,EAA2C;AACvC,kBAAM,IAAIC,KAAJ,CAAaH,QAAb,0BAAN;AACH;AACD;AACAZ,qBAAaQ,iBAAb,EAAgCZ,eAAeiB,OAAOZ,WAAtB,EAAmCW,QAAnC,CAAhC;AACH,KAXD;AAYA,WAAOJ,iBAAP;AACH","file":"preset-loader.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst interopRequire = require(\"interop-require\");\nconst ObjectAssign = require(\"object-assign\");\nimport TextLintModuleMapper from \"../engine/textlint-module-mapper\";\n\n/**\n * create `<plugin>/<rule>` option\n * @param {Object} [rulesConfig]\n * @param {string} presetName\n * @returns {Object}\n */\nexport function mapRulesConfig(rulesConfig, presetName) {\n    const mapped = {};\n    // missing \"rulesConfig\"\n    if (rulesConfig === undefined || typeof rulesConfig !== \"object\") {\n        return mapped;\n    }\n    return TextLintModuleMapper.createMappedObject(rulesConfig, presetName);\n}\n// load rulesConfig from plugins\n/**\n *\n * @param ruleNames\n * @param {TextLintModuleResolver} moduleResolver\n * @returns {{}}\n */\nexport default function findRulesAndConfig(ruleNames = [], moduleResolver) {\n    const presetRulesConfig = {};\n    ruleNames.forEach(ruleName => {\n        const pkgPath = moduleResolver.resolvePresetPackageName(ruleName);\n        const preset = interopRequire(pkgPath);\n        if (!preset.hasOwnProperty(\"rules\")) {\n            throw new Error(`${ruleName} has not rules`);\n        }\n        if (!preset.hasOwnProperty(\"rulesConfig\")) {\n            throw new Error(`${ruleName} has not rulesConfig`);\n        }\n        // set config of <rule> to \"<preset>/<rule>\"\n        ObjectAssign(presetRulesConfig, mapRulesConfig(preset.rulesConfig, ruleName));\n    });\n    return presetRulesConfig;\n}\n"]}