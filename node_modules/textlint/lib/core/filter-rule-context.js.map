{"version":3,"sources":["../../src/core/filter-rule-context.js"],"names":["FilterRuleContext","assert","require","ruleId","sourceCode","ignoreReport","textLintConfig","Object","defineProperty","value","shouldIgnore","range","optional","Array","isArray","Syntax","getSyntax","getFilePath","bind","getSource"],"mappings":"AAAA;AACA;;;;;kBAgBwBA,iB;AAfxB,IAAMC,SAASC,QAAQ,QAAR,CAAf;AACA;;;;;;AAMA;;;;;;;;AAQe,SAASF,iBAAT,OAA+E;AAAA,MAAnDG,MAAmD,QAAnDA,MAAmD;AAAA,MAA3CC,UAA2C,QAA3CA,UAA2C;AAAA,MAA/BC,YAA+B,QAA/BA,YAA+B;AAAA,MAAjBC,cAAiB,QAAjBA,cAAiB;;AAC1FC,SAAOC,cAAP,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC,EAACC,OAAON,MAAR,EAAlC;AACAI,SAAOC,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC,EAACC,OAAOH,cAAR,EAAtC;AACA;;;;;;;AAOA,OAAKI,YAAL,GAAoB,UAAUC,KAAV,EAAgC;AAAA,QAAfC,QAAe,uEAAJ,EAAI;;AAChDX,WAAOY,MAAMC,OAAN,CAAcH,KAAd,KAAwB,OAAOA,MAAM,CAAN,CAAP,KAAoB,QAA5C,IAAwD,OAAOA,MAAM,CAAN,CAAP,KAAoB,QAAnF,EACI,+CADJ;AAEAN,iBAAa,EAACF,cAAD,EAASQ,YAAT,EAAgBC,kBAAhB,EAAb;AACH,GAJD;AAKA;;;;AAIA,OAAKG,MAAL,GAAcX,WAAWY,SAAX,EAAd;AACA;;;;AAIA,OAAKC,WAAL,GAAmBb,WAAWa,WAAX,CAAuBC,IAAvB,CAA4Bd,UAA5B,CAAnB;AACA;;;;AAIA,OAAKe,SAAL,GAAiBf,WAAWe,SAAX,CAAqBD,IAArB,CAA0Bd,UAA1B,CAAjB;AACH","file":"filter-rule-context.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\n/**\n * This callback is displayed as a global member.\n * @callback ReportCallback\n * @param {ReportIgnoreMessage} message\n */\n\n/**\n * Rule context object is passed to each rule as `context`\n * @param {string} ruleId\n * @param {SourceCode} sourceCode\n * @param {function(ReportIgnoreMessage)} ignoreReport\n * @param {Config} textLintConfig\n * @constructor\n */\nexport default function FilterRuleContext({ruleId, sourceCode, ignoreReport, textLintConfig}) {\n    Object.defineProperty(this, \"id\", {value: ruleId});\n    Object.defineProperty(this, \"config\", {value: textLintConfig});\n    /**\n     * Report range for filtering\n     * @param {number[]} range the `range` is absolute position values\n     * @param {{ ruleId: string }} [optional] ignoring option object\n     * - `ruleId` match the TextLintMessage.ruleId and filter the message. (default: `ruleId` of the rule)\n     *   if `ruleId` is \"*\", match any TextLintMessage.ruleId.\n     */\n    this.shouldIgnore = function (range, optional = {}) {\n        assert(Array.isArray(range) && typeof range[0] === \"number\" && typeof range[1] === \"number\",\n            \"shouldIgnore([number, number]); accept range.\");\n        ignoreReport({ruleId, range, optional});\n    };\n    /**\n     * Node's type values\n     * @type {TextLintNodeType}\n     */\n    this.Syntax = sourceCode.getSyntax();\n    /**\n     * get file path current processing.\n     * @type {Function}\n     */\n    this.getFilePath = sourceCode.getFilePath.bind(sourceCode);\n    /**\n     * get source code text\n     * @type {Function}\n     */\n    this.getSource = sourceCode.getSource.bind(sourceCode);\n}\n"]}