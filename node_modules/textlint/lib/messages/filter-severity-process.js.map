{"version":3,"sources":["../../src/messages/filter-severity-process.js"],"names":["createSeverityFilter","filterWarningMessages","messages","filter","message","severity","error","through","config","quiet"],"mappings":"AAAA;AACA;;;;;kBA4BwBA,oB;;AA3BxB;;;;;;AAEA;;;;;AAKA,SAASC,qBAAT,GAA8C;AAAA,QAAfC,QAAe,uEAAJ,EAAI;;AAC1C,WAAOA,SAASC,MAAT,CAAgB,mBAAW;AAC9B,eAAOC,QAAQC,QAAR,KAAqB,wBAAcC,KAA1C;AACH,KAFM,CAAP;AAGH;;AAED;;;;;AAKA,SAASC,OAAT,GAAgC;AAAA,QAAfL,QAAe,uEAAJ,EAAI;;AAC5B,WAAOA,QAAP;AACH;;AAED;;;;;AAKe,SAASF,oBAAT,CAA8BQ,MAA9B,EAAsC;AACjD,QAAIA,OAAOC,KAAX,EAAkB;AACd,eAAOR,qBAAP;AACH,KAFD,MAEO;AACH,eAAOM,OAAP;AACH;AACJ","file":"filter-severity-process.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport SeverityLevel from \"../shared/type/SeverityLevel\";\n\n/**\n * Filter messages by their severity.\n * @param {TextLintMessage[]} messages\n * @returns {TextLintMessage[]} filtered messages\n */\nfunction filterWarningMessages(messages = []) {\n    return messages.filter(message => {\n        return message.severity === SeverityLevel.error;\n    });\n}\n\n/**\n * Pass through all messages.\n * @param {TextLintMessage[]} messages\n * @returns {TextLintMessage[]}\n */\nfunction through(messages = []) {\n    return messages;\n}\n\n/**\n * Create message filter by config.quiet.\n * @param {Config} config\n * @returns {Function} filter function for messages\n */\nexport default function createSeverityFilter(config) {\n    if (config.quiet) {\n        return filterWarningMessages;\n    } else {\n        return through;\n    }\n}\n"]}