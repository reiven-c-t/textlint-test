{"version":3,"sources":["../src/textlint-core.js"],"names":["path","require","assert","addingAtFileNameToError","fileName","message","TextlintCore","config","ruleCreatorSet","filterRuleCreatorSet","_defaultProcessors","processors","slice","messageProcessManager","add","Processor","unshift","length","Object","keys","forEach","key","addProcessor","concat","rules","rulesConfig","processor","text","ext","filePath","preProcess","postProcess","ast","sourceCode","linterProcessor","process","catch","error","Promise","reject","_parallelProcess","lintText","absoluteFilePath","resolve","cwd","extname","then","_sequenceProcess","fixerProcessor"],"mappings":"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","file":"textlint-core.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n textlint-core.js is a class\n textlint.js is a singleton object that is instance of textlint-core.js.\n */\nconst path = require(\"path\");\nconst assert = require(\"assert\");\nimport {readFile} from \"./util/fs-promise\";\nimport SourceCode from \"./core/source-code\";\nimport {getProcessorMatchExtension} from \"./util/proccesor-helper\";\nimport {Processor as MarkdownProcessor} from \"textlint-plugin-markdown\";\nimport {Processor as TextProcessor} from \"textlint-plugin-text\";\nimport RuleCreatorSet from \"./core/rule-creator-set\";\n// = Processors\n// sequence\nimport FixerProcessor from \"./fixer/fixer-processor\";\n// parallel\nimport LinterProcessor from \"./linter/linter-processor\";\n// message process manager\nimport MessageProcessManager from \"./messages/MessageProcessManager\";\nimport filterIgnoredProcess from \"./messages/filter-ignored-process\";\nimport filterDuplicatedProcess from \"./messages/filter-duplicated-process\";\nimport filterSeverityProcess from \"./messages/filter-severity-process\";\nimport sortMessageProcess from \"./messages/sort-messages-process\";\n/**\n * add fileName to trailing of error message\n * @param {string|undefined} fileName\n * @param {string} message\n * @returns {string}\n */\nfunction addingAtFileNameToError(fileName, message) {\n    if (!fileName) {\n        return message;\n    }\n    return `${message}\nat ${fileName}`;\n\n}\n/**\n * @class {TextlintCore}\n */\nexport default class TextlintCore {\n    constructor(config = {}) {\n        // this.config often is undefined.\n        this.config = config;\n        this.ruleCreatorSet = new RuleCreatorSet();\n        this.filterRuleCreatorSet = new RuleCreatorSet();\n        // Markdown and Text are for backward compatibility.\n        // FIXME: in the future, this.processors is empty by default.\n        this._defaultProcessors = [\n            new MarkdownProcessor(config),\n            new TextProcessor(config)\n        ];\n        this.processors = this._defaultProcessors.slice();\n        // Initialize Message Processor\n        // Now, It it built-in process only\n        this.messageProcessManager = new MessageProcessManager();\n        // filter `shouldIgnore()` results\n        this.messageProcessManager.add(filterIgnoredProcess);\n        // filter duplicated messages\n        this.messageProcessManager.add(filterDuplicatedProcess);\n        // filter by severity\n        this.messageProcessManager.add(filterSeverityProcess(this.config));\n        this.messageProcessManager.add(sortMessageProcess);\n    }\n\n    /**\n     * unstable API\n     * @param Processor\n     * @private\n     */\n    addProcessor(Processor) {\n        // add first\n        this.processors.unshift(new Processor(this.config));\n    }\n\n    /**\n     * register Processors\n     * @param {Object} processors\n     */\n    setupProcessors(processors = {}) {\n        this.processors.length = 0;\n        Object.keys(processors).forEach(key => {\n            const Processor = processors[key];\n            this.addProcessor(Processor);\n        });\n        this.processors = this.processors.concat(this._defaultProcessors);\n    }\n\n\n    /**\n     * Register rules and rulesConfig.\n     * if want to release rules, please call {@link resetRules}.\n     * @param {object} rules rule objects array\n     * @param {object} [rulesConfig] ruleConfig is object\n     */\n    setupRules(rules = {}, rulesConfig = {}) {\n        this.ruleCreatorSet = new RuleCreatorSet(rules, rulesConfig);\n    }\n\n    /**\n     * Register filterRules and filterRulesConfig.\n     * if want to release rules, please call {@link resetRules}.\n     * @param {object} rules rule objects array\n     * @param {object} [rulesConfig] ruleConfig is object\n     */\n    setupFilterRules(rules = {}, rulesConfig = {}) {\n        this.filterRuleCreatorSet = new RuleCreatorSet(rules, rulesConfig);\n    }\n\n    /**\n     * Remove all registered rule and clear messages.\n     */\n    resetRules() {\n        this.ruleCreatorSet = new RuleCreatorSet();\n        this.filterRuleCreatorSet = new RuleCreatorSet();\n    }\n\n    /**\n     * process text in parallel for Rules and return {Promise.<TextLintResult>}\n     * In other word, parallel flow process.\n     * @param processor\n     * @param text\n     * @param ext\n     * @param filePath\n     * @returns {Promise.<TextLintResult>}\n     * @private\n     */\n    _parallelProcess(processor, text, ext, filePath) {\n        assert(processor, `processor is not found for ${ext}`);\n        const {preProcess, postProcess} = processor.processor(ext);\n        assert(typeof preProcess === \"function\" && typeof postProcess === \"function\",\n            \"processor should implement {preProcess, postProcess}\");\n        const ast = preProcess(text, filePath);\n        const sourceCode = new SourceCode({\n            text,\n            ast,\n            ext,\n            filePath\n        });\n        const linterProcessor = new LinterProcessor(processor, this.messageProcessManager);\n        return linterProcessor.process({\n            config: this.config,\n            ruleCreatorSet: this.ruleCreatorSet,\n            filterRuleCreatorSet: this.filterRuleCreatorSet,\n            sourceCode: sourceCode\n        }).catch(error => {\n            error.message = addingAtFileNameToError(filePath, error.message);\n            return Promise.reject(error);\n        });\n    }\n\n    /**\n     * lint text by registered rules.\n     * The result contains target filePath and error messages.\n     * @param {string} text\n     * @param {string} ext ext is extension. default: .txt\n     * @returns {Promise.<TextLintResult>}\n     */\n    lintText(text, ext = \".txt\") {\n        const processor = getProcessorMatchExtension(this.processors, ext);\n        return this._parallelProcess(processor, text, ext);\n    }\n\n    /**\n     * lint markdown text by registered rules.\n     * The result contains target filePath and error messages.\n     * @param {string} text markdown format text\n     * @returns {Promise.<TextLintResult>}\n     */\n    lintMarkdown(text) {\n        const ext = \".md\";\n        return this.lintText(text, ext);\n    }\n\n    /**\n     * lint file and return result object\n     * @param {string} filePath\n     * @returns {Promise.<TextLintResult>} result\n     */\n    lintFile(filePath) {\n        const absoluteFilePath = path.resolve(process.cwd(), filePath);\n        const ext = path.extname(absoluteFilePath);\n        return readFile(absoluteFilePath).then(text => {\n            const processor = getProcessorMatchExtension(this.processors, ext);\n            return this._parallelProcess(processor, text, ext, absoluteFilePath);\n        });\n    }\n\n    /**\n     * fix file and return fix result object\n     * @param {string} filePath\n     * @returns {Promise.<TextLintFixResult>}\n     */\n    fixFile(filePath) {\n        const absoluteFilePath = path.resolve(process.cwd(), filePath);\n        const ext = path.extname(absoluteFilePath);\n        return readFile(absoluteFilePath).then(text => {\n            const processor = getProcessorMatchExtension(this.processors, ext);\n            return this._sequenceProcess(processor, text, ext, absoluteFilePath);\n        });\n    }\n\n    /**\n     * fix texts and return fix result object\n     * @param {string} text\n     * @param {string} ext\n     * @returns {Promise.<TextLintFixResult>}\n     */\n    fixText(text, ext = \".txt\") {\n        const processor = getProcessorMatchExtension(this.processors, ext);\n        return this._sequenceProcess(processor, text, ext);\n    }\n\n    /**\n     * process text in series for Rules and return {Promise.<TextLintFixResult>}\n     * In other word, sequence flow process.\n     * @param processor\n     * @param text\n     * @param ext\n     * @param filePath\n     * @returns {Promise.<TextLintFixResult>}\n     * @private\n     */\n    _sequenceProcess(processor, text, ext, filePath) {\n        assert(processor, `processor is not found for ${ext}`);\n        const {preProcess, postProcess} = processor.processor(ext);\n        assert(typeof preProcess === \"function\" && typeof postProcess === \"function\",\n            \"processor should implement {preProcess, postProcess}\");\n        const ast = preProcess(text, filePath);\n        const sourceCode = new SourceCode({\n            text,\n            ast,\n            ext,\n            filePath\n        });\n        const fixerProcessor = new FixerProcessor(processor, this.messageProcessManager);\n        return fixerProcessor.process({\n            config: this.config,\n            ruleCreatorSet: this.ruleCreatorSet,\n            filterRuleCreatorSet: this.filterRuleCreatorSet,\n            sourceCode: sourceCode\n        }).catch(error => {\n            error.message = addingAtFileNameToError(filePath, error.message);\n            return Promise.reject(error);\n        });\n    }\n}\n"]}