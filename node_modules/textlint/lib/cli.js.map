{"version":3,"sources":["../src/cli.js"],"names":["Promise","require","fs","path","debug","mkdirp","printResults","output","options","outputFile","filePath","resolve","process","cwd","existsSync","statSync","isDirectory","error","sync","dirname","writeFileSync","ex","log","cli","execute","args","text","currentOptions","parse","message","files","_","version","init","initializeConfig","help","length","generateHelp","stdinFilename","executeWithOptions","cliOptions","config","initWithCLIOptions","showEmptyRuleWarning","fix","fixEngine","hasRuleAtLeastOne","resultsPromise","executeOnText","executeOnFiles","then","fixer","formatResults","results","dryRun","write","lintEngine","isErrorResults","module","exports"],"mappings":"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","file":"cli.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst Promise = require(\"bluebird\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst debug = require(\"debug\")(\"textlint:cli\");\nconst mkdirp = require(\"mkdirp\");\nimport options from \"./options\";\nimport TextLintEngine from \"./textlint-engine\";\nimport TextFixEngine from \"./textfix-engine\";\nimport Config from \"./config/config\";\nimport configInit from \"./config/config-initializer\";\nimport TextLintFixer from \"./fixer/textlint-fixer\";\nimport Logger from \"./util/logger\";\n/*\n cli.js is command line **interface**\n\n processing role is cli-engine.js.\n @see cli-engine.js\n */\n\n/** @typedef {Object} TextLintFormatterOption\n *  @property {string} formatterName\n *  @property {boolean} noColor\n */\n\n/**\n * Print results of lining text.\n * @param {string} output the output text which is formatted by {@link TextLintEngine.formatResults}\n * @param {object} options cli option object {@lint ./options.js}\n * @returns {boolean} does print result success?\n */\nfunction printResults(output, options) {\n    if (!output) {\n        return true;\n    }\n    const outputFile = options.outputFile;\n    if (outputFile) {\n        const filePath = path.resolve(process.cwd(), outputFile);\n        if (fs.existsSync(filePath) && fs.statSync(filePath).isDirectory()) {\n            Logger.error(\"Cannot write to output file path, it is a directory: %s\", outputFile);\n            return false;\n        }\n        try {\n            mkdirp.sync(path.dirname(filePath));\n            fs.writeFileSync(filePath, output);\n        } catch (ex) {\n            Logger.error(\"There was a problem writing the output file:\\n%s\", ex);\n            return false;\n        }\n    } else {\n        Logger.log(output);\n    }\n    return true;\n}\n\n/**\n * Encapsulates all CLI behavior for eslint. Makes it easier to test as well as\n * for other Node.js programs to effectively run the CLI.\n */\nconst cli = {\n    /**\n     * Executes the CLI based on an array of arguments that is passed in.\n     * @param {string|Array|Object} args The arguments to process.\n     * @param {string} [text] The text to lint (used for TTY).\n     * @returns {Promise<number>} The exit code for the operation.\n     */\n    execute(args, text) {\n        let currentOptions;\n        try {\n            currentOptions = options.parse(args);\n        } catch (error) {\n            Logger.error(error.message);\n            return Promise.resolve(1);\n        }\n        const files = currentOptions._;\n        if (currentOptions.version) {\n            // version from package.json\n            Logger.log(`v${ require(\"../package.json\").version }`);\n        } else if (currentOptions.init) {\n            return configInit.initializeConfig(process.cwd());\n        } else if (currentOptions.help || !files.length && !text) {\n            Logger.log(options.generateHelp());\n        } else {\n            // specify file name of stdin content\n            const stdinFilename = currentOptions.stdinFilename;\n            debug(`Running on ${ text ? \"text\" : \"files\" }, stdin-filename: ${stdinFilename}`);\n            return this.executeWithOptions(currentOptions, files, text, stdinFilename);\n        }\n        return Promise.resolve(0);\n    },\n    /**\n     * execute with cli options\n     * @param {object} cliOptions\n     * @param {string[]} files files are file path list\n     * @param {string} [text]\n     * @param {string} [stdinFilename]\n     * @returns {Promise<number>} exit status\n     */\n    executeWithOptions(cliOptions, files, text, stdinFilename){\n        const config = Config.initWithCLIOptions(cliOptions);\n        const showEmptyRuleWarning = () => {\n            Logger.log(`\n== Not have rules, textlint do not anything ==\n=> How to set rule?\nSee https://github.com/textlint/textlint/blob/master/docs/configuring.md\n`);\n        };\n\n        if (cliOptions.fix) {\n            // --fix\n            const fixEngine = new TextFixEngine(config);\n            if (!fixEngine.hasRuleAtLeastOne()) {\n                showEmptyRuleWarning();\n                return Promise.resolve(0);\n            }\n            const resultsPromise = text ? fixEngine.executeOnText(text, stdinFilename)\n                : fixEngine.executeOnFiles(files);\n            return resultsPromise.then(results => {\n                const fixer = new TextLintFixer();\n                const output = fixEngine.formatResults(results);\n                printResults(output, cliOptions);\n                // --dry-run\n                if(cliOptions.dryRun){\n                    debug(\"Enable dry-run mode.\");\n                    return Promise.resolve(0);\n                }\n                // modify file and return exit status\n                return fixer.write(results).then(() => {\n                    return 0;\n                });\n            });\n        }\n        // lint as default\n        const lintEngine = new TextLintEngine(config);\n        if (!lintEngine.hasRuleAtLeastOne()) {\n            showEmptyRuleWarning();\n            return Promise.resolve(0);\n        }\n        const resultsPromise = text ? lintEngine.executeOnText(text, stdinFilename) : lintEngine.executeOnFiles(files);\n        return resultsPromise.then(results => {\n            const output = lintEngine.formatResults(results);\n            if (printResults(output, cliOptions)) {\n                return lintEngine.isErrorResults(results) ? 1 : 0;\n            } else {\n                return 1;\n            }\n        });\n    }\n};\nmodule.exports = cli;\n"]}