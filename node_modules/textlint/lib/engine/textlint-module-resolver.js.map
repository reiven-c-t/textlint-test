{"version":3,"sources":["../../src/engine/textlint-module-resolver.js"],"names":["assert","require","path","tryResolve","validateConfigConstructor","ConfigConstructor","CONFIG_PACKAGE_PREFIX","FILTER_RULE_NAME_PREFIX","RULE_NAME_PREFIX","RULE_PRESET_NAME_PREFIX","PLUGIN_NAME_PREFIX","TextLintModuleResolver","baseDirectory","packageName","baseDir","PREFIX","fullPackageName","pkgPath","join","ReferenceError","packageNameWithoutPreset","replace","fullFullPackageName"],"mappings":"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","file":"textlint-module-resolver.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\nconst path = require(\"path\");\nconst tryResolve = require(\"try-resolve\");\nconst validateConfigConstructor = (ConfigConstructor) => {\n    assert(ConfigConstructor.CONFIG_PACKAGE_PREFIX &&\n        ConfigConstructor.FILTER_RULE_NAME_PREFIX &&\n        ConfigConstructor.RULE_NAME_PREFIX &&\n        ConfigConstructor.RULE_PRESET_NAME_PREFIX &&\n        ConfigConstructor.PLUGIN_NAME_PREFIX);\n};\n/**\n * This class aim to resolve textlint's package name and get the module path.\n *\n * Define\n *\n * - `package` is npm package\n * - `module` is package's main module\n *\n * ## Support\n *\n * - textlint-rule-*\n * - textlint-preset-*\n * - textlint-plugin-*\n * - textlint-config-*\n */\nexport default class TextLintModuleResolver {\n    /**\n     *\n     * @param {Config|*} ConfigConstructor config constructor like object\n     * It has static property like CONFIG_PACKAGE_PREFIX etc...\n     * @param {string} [baseDirectory]\n     * @constructor\n     */\n    constructor(ConfigConstructor, baseDirectory = \"\") {\n        validateConfigConstructor(ConfigConstructor);\n        /**\n         * @type {string} config package prefix\n         */\n        this.CONFIG_PACKAGE_PREFIX = ConfigConstructor.CONFIG_PACKAGE_PREFIX;\n        /**\n         * @type {string} rule package's name prefix\n         */\n        this.RULE_NAME_PREFIX = ConfigConstructor.RULE_NAME_PREFIX;\n        /**\n         * @type {string} filter rule package's name prefix\n         */\n        this.FILTER_RULE_NAME_PREFIX = ConfigConstructor.FILTER_RULE_NAME_PREFIX;\n        /**\n         * @type {string} rule preset package's name prefix\n         */\n        this.RULE_PRESET_NAME_PREFIX = ConfigConstructor.RULE_PRESET_NAME_PREFIX;\n        /**\n         * @type {string} plugins package's name prefix\n         */\n        this.PLUGIN_NAME_PREFIX = ConfigConstructor.PLUGIN_NAME_PREFIX;\n\n        /**\n         * @type {string} baseDirectory for resolving\n         */\n        this.baseDirectory = baseDirectory;\n    }\n\n    /**\n     * Take package name, and return path to module.\n     * @param {string} packageName\n     * @returns {string} return path to module\n     */\n    resolveRulePackageName(packageName) {\n        const baseDir = this.baseDirectory;\n        const PREFIX = this.RULE_NAME_PREFIX;\n        const fullPackageName = `${PREFIX}${packageName}`;\n        // <rule-name> or textlint-rule-<rule-name>\n        const pkgPath = tryResolve(path.join(baseDir, fullPackageName)) || tryResolve(path.join(baseDir, packageName));\n        if (!pkgPath) {\n            throw new ReferenceError(`Failed to load textlint's rule module: \"${packageName}\" is not found.\nSee FAQ: https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md\n`);\n        }\n        return pkgPath;\n    }\n\n    /**\n     * Take package name, and return path to module.\n     * @param {string} packageName\n     * @returns {string} return path to module\n     */\n    resolveFilterRulePackageName(packageName) {\n        const baseDir = this.baseDirectory;\n        const PREFIX = this.FILTER_RULE_NAME_PREFIX;\n        const fullPackageName = `${PREFIX}${packageName}`;\n        // <rule-name> or textlint-filter-rule-<rule-name>\n        const pkgPath = tryResolve(path.join(baseDir, fullPackageName)) || tryResolve(path.join(baseDir, packageName));\n        if (!pkgPath) {\n            throw new ReferenceError(`Failed to load textlint's filter rule module: \"${packageName}\" is not found.\nSee FAQ: https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md\n`);\n        }\n        return pkgPath;\n    }\n\n    /**\n     * Take package name, and return path to module.\n     * @param {string} packageName\n     * @returns {string} return path to module\n     */\n    resolvePluginPackageName(packageName) {\n        const baseDir = this.baseDirectory;\n        const PREFIX = this.PLUGIN_NAME_PREFIX;\n        const fullPackageName = `${PREFIX}${packageName}`;\n        // <plugin-name> or textlint-plugin-<rule-name>\n        const pkgPath = tryResolve(path.join(baseDir, fullPackageName)) || tryResolve(path.join(baseDir, packageName));\n        if (!pkgPath) {\n            throw new ReferenceError(`Failed to load textlint's plugin module: \"${packageName}\" is not found.\nSee FAQ: https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md\n`);\n        }\n        return pkgPath;\n    }\n\n    /**\n     * Take package name, and return path to module.\n     * @param {string} packageName\n     * @returns {string} return path to module\n     */\n    resolvePresetPackageName(packageName) {\n        const baseDir = this.baseDirectory;\n        const PREFIX = this.RULE_PRESET_NAME_PREFIX;\n        const fullPackageName = `${PREFIX}${packageName}`;\n\n        /* Implementation Note\n        \n        preset name is defined in config file:\n        In the case, `packageName` is \"preset-gizmo\"\n        TextLintModuleResolver resolve \"preset-gizmo\" to \"textlint-rule-preset-gizmo\"\n\n        {\n            \"rules\": {\n                \"preset-gizmo\": {\n                    \"ruleA\": false\n                }\n            }\n        }\n         */\n        // <preset-name> or textlint-rule-preset-<rule-name>\n        const packageNameWithoutPreset = packageName.replace(/^preset\\-/, \"\");\n        const fullFullPackageName = `${PREFIX}${packageNameWithoutPreset}`;\n        // preset-<preset-name> or textlint-rule-preset-<preset-name>\n        const pkgPath = tryResolve(path.join(baseDir, fullFullPackageName)) ||\n            tryResolve(path.join(baseDir, packageNameWithoutPreset)) ||\n            // <preset-name> or textlint-rule-preset-<rule-name>\n            tryResolve(path.join(baseDir, fullPackageName)) ||\n            tryResolve(path.join(baseDir, packageName));\n        if (!pkgPath) {\n            throw new ReferenceError(`Failed to load textlint's preset module: \"${packageName}\" is not found.\nSee FAQ: https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md\n`);\n        }\n        return pkgPath;\n    }\n\n\n    /**\n     * Take Config package name, and return path to module.\n     * @param {string} packageName\n     * @returns {string} return path to module\n     */\n    resolveConfigPackageName(packageName) {\n        const baseDir = this.baseDirectory;\n        const PREFIX = this.CONFIG_PACKAGE_PREFIX;\n        const fullPackageName = `${PREFIX}${packageName}`;\n        // <plugin-name> or textlint-config-<rule-name>\n        const pkgPath = tryResolve(path.join(baseDir, fullPackageName)) || tryResolve(path.join(baseDir, packageName));\n        if (!pkgPath) {\n            throw new ReferenceError(`Failed to load textlint's config module: \"${packageName}\" is not found.\nSee FAQ: https://github.com/textlint/textlint/blob/master/docs/faq/failed-to-load-textlints-module.md\n`);\n        }\n        return pkgPath;\n    }\n}\n\n"]}