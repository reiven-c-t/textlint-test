{"version":3,"sources":["../src/max-length-of-title.js"],"names":[],"mappings":";;;;;;;;sBAA+B,QAAQ;;AAEvC,IAAM,cAAc,GAAG;AACrB,KAAG,EAAE,EAAE;AACP,eAAa,EAAE,KAAK;CACrB,CAAC;;qBAEa,UAAS,OAAO,EAAgB;MAAd,OAAO,yDAAG,EAAE;;AAE3C,SAAO,GAAG,oBAAO,EAAE,EAAE,cAAc,EAAE,OAAO,CAAC,CAAC;MACzC,MAAM,GAAkC,OAAO,CAA/C,MAAM;MAAE,SAAS,GAAuB,OAAO,CAAvC,SAAS;MAAE,MAAM,GAAe,OAAO,CAA5B,MAAM;MAAE,SAAS,GAAI,OAAO,CAApB,SAAS;;AAEzC,6BACG,MAAM,CAAC,MAAM,EAAC,UAAC,IAAI,EAAE;AACpB,WAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,UAAM,KAAK,GAAG,sBAAS,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;AACjE,UAAM,KAAK,GAAG,sBAAS,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACjC,UAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEhC,UAAM,MAAM,GAAG,OAAO,CAAC,WAAW,GAAG,iBAAiB,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;;AAE7E,UAAI,KAAK,GAAG,MAAM,EAAE;AAClB,cAAM,CAAC,IAAI,EAAE,IAAI,SAAS,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;OACrE;;AAED,aAAO,EAAE,CAAC;KACX,CAAC,CAAC;GACJ,EACF;CACF;;AAED,SAAS,iBAAiB,CAAC,IAAI,EAAE;AAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;AACjD,SAAO,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAA,GAAI,CAAC,CAAC,CAAC;CACvE;;AAED,SAAS,UAAU,CAAC,IAAI,EAAE,KAAK,EAAe;MAAb,IAAI,yDAAG,IAAI;;AAC1C,UAAQ,IAAI;AACV,SAAK,IAAI;AACP,mBAAW,IAAI,UAAK,KAAK,gBAAa;AAAA,AACxC;AACE,mBAAW,IAAI,kBAAa,KAAK,CAAG;AAAA,GACvC;CACF","file":"max-length-of-title.js","sourcesContent":["import {assign, trimLeft} from 'lodash';\n\nconst defaultOptions = {\n  '#': 32,\n  'zenkakuBase': false\n};\n\nexport default function(context, options = {}) {\n\n  options = assign({}, defaultOptions, options);\n  let {Syntax, getSource, report, RuleError} = context;\n\n  return {\n    [Syntax.Header](node) {\n      return new Promise((resolve, reject) => {\n        const match = trimLeft(getSource(node)).match(/^([#]+)([^#]*)$/);\n        const title = trimLeft(match[2]);\n        const limit = options[match[1]];\n\n        const length = options.zenkakuBase ? zenkakuBaseLength(title) : title.length;\n\n        if (limit < length) {\n          report(node, new RuleError(getMessage(title, limit, options.lang)));\n        }\n\n        resolve();\n      });\n    }\n  }\n}\n\nfunction zenkakuBaseLength(text) {\n  const zenkaku = text.replace(/[\\x20-\\x7E]/g, '');\n  return zenkaku.length + Math.ceil((text.length - zenkaku.length) / 2);\n}\n\nfunction getMessage(text, limit, lang = 'en') {\n  switch (lang) {\n    case 'ja':\n      return `「${text}」が${limit}文字を超えています。`;\n    default:\n      return `\"${text}\" is over ${limit}`;\n  }\n}\n"]}