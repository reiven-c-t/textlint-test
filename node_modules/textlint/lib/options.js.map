{"version":3,"sources":["../src/options.js"],"names":["optionator","require","prepend","concatRepeatedArrays","mergeRepeatedObjects","options","heading","option","alias","type","description","example","default"],"mappings":"AAAA;AACA;;;;;AACA,IAAMA,aAAaC,QAAQ,YAAR,CAAnB;kBACeD,WAAW;AACtBE,aAAS,6CADa;AAEtBC,0BAAsB,IAFA;AAGtBC,0BAAsB,IAHA;AAItBC,aAAS,CACL,EAACC,SAAS,SAAV,EADK,EAEL;AACIC,gBAAQ,MADZ;AAEIC,eAAO,GAFX;AAGIC,cAAM,SAHV;AAIIC,qBAAa;AAJjB,KAFK,EAQL;AACIH,gBAAQ,QADZ;AAEIC,eAAO,GAFX;AAGIC,cAAM,cAHV;AAIIC,qBAAa,sDAJjB;AAKIC,iBAAS;AALb,KARK,EAeL;AACIJ,gBAAQ,MADZ;AAEIE,cAAM,SAFV;AAGIG,iBAAS,OAHb;AAIIF,qBAAa;AAJjB,KAfK,EAqBL;AACIH,gBAAQ,KADZ;AAEIE,cAAM,SAFV;AAGIG,iBAAS,KAHb;AAIIF,qBAAa,4BAJjB;AAKIC,iBAAS;AALb,KArBK,EA4BL;AACIJ,gBAAQ,SADZ;AAEIE,cAAM,SAFV;AAGIG,iBAAS,KAHb;AAIIF,qBAAa,yEAJjB;AAKIC,iBAAS;AALb,KA5BK,EAmCL;AACIJ,gBAAQ,OADZ;AAEIE,cAAM,SAFV;AAGIG,iBAAS,KAHb;AAIIF,qBAAa;AAJjB,KAnCK,EAyCL;AACIH,gBAAQ,SADZ;AAEIC,eAAO,GAFX;AAGIC,cAAM,SAHV;AAIIC,qBAAa;AAJjB,KAzCK,EA+CL;AACIJ,iBAAS;AADb,KA/CK,EAkDL;AACIC,gBAAQ,OADZ;AAEIE,cAAM,SAFV;AAGIG,iBAAS,OAHb;AAIIF,qBAAa;AAJjB,KAlDK,EAwDL;AACIH,gBAAQ,gBADZ;AAEIE,cAAM,QAFV;AAGIC,qBAAa,sCAHjB;AAIIC,iBAAS;AAJb,KAxDK,EA8DL;AACIL,iBAAS;AADb,KA9DK,EAiEL;AACIC,gBAAQ,aADZ;AAEIC,eAAO,GAFX;AAGIC,cAAM,cAHV;AAIIC,qBAAa;AAJjB,KAjEK,EAuEL;AACIH,gBAAQ,QADZ;AAEIC,eAAO,GAFX;AAGIC,cAAM,QAHV;AAIIC,qBAAa,+BAJjB;AAKIC,iBAAS;AALb,KAvEK,EA8EL;AACIJ,gBAAQ,OADZ;AAEIE,cAAM,SAFV;AAGIG,iBAAS,MAHb;AAIIF,qBAAa;AAJjB,KA9EK,EAoFL;AACIH,gBAAQ,OADZ;AAEIE,cAAM,SAFV;AAGIG,iBAAS,OAHb;AAIIF,qBAAa;AAJjB,KApFK,EA0FL;AACIJ,iBAAS;AADb,KA1FK,EA6FL;AACIC,gBAAQ,QADZ;AAEIE,cAAM,UAFV;AAGIC,qBAAa,yBAHjB;AAIIC,iBAAS;AAJb,KA7FK,EAmGL;AACIJ,gBAAQ,MADZ;AAEIE,cAAM,gBAFV;AAGIC,qBAAa;AAHjB,KAnGK,EAwGL;AACIH,gBAAQ,QADZ;AAEIE,cAAM,gBAFV;AAGIC,qBAAa;AAHjB,KAxGK,EA6GL;AACIH,gBAAQ,UADZ;AAEIE,cAAM,gBAFV;AAGIC,qBAAa;AAHjB,KA7GK,EAkHL;AACIJ,iBAAS;AADb,KAlHK,EAqHL;AACIC,gBAAQ,OADZ;AAEIE,cAAM,SAFV;AAGIG,iBAAS,OAHb;AAIIF,qBAAa,0BAJjB;AAKIC,iBAAS;AALb,KArHK,EA4HL;AACIJ,gBAAQ,gBADZ;AAEIE,cAAM,cAFV;AAGIC,qBAAa,qCAHjB;AAIIC,iBAAS;AAJb,KA5HK,EAkIL;AACIL,iBAAS;AADb,KAlIK,EAqIL;AACIC,gBAAQ,cADZ;AAEIE,cAAM,SAFV;AAGIG,iBAAS,KAHb;AAIIF,qBAAa,4DAJjB;AAKIC,iBAAS;AALb,KArIK;AAJa,CAAX,C","file":"options.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst optionator = require(\"optionator\");\nexport default optionator({\n    prepend: \"textlint [options] file.md [file|dir|glob*]\",\n    concatRepeatedArrays: true,\n    mergeRepeatedObjects: true,\n    options: [\n        {heading: \"Options\"},\n        {\n            option: \"help\",\n            alias: \"h\",\n            type: \"Boolean\",\n            description: \"Show help.\"\n        },\n        {\n            option: \"config\",\n            alias: \"c\",\n            type: \"path::String\",\n            description: \"Use configuration from this file or sharable config.\",\n            example: \"--config /path/to/.textlintrc\"\n        },\n        {\n            option: \"init\",\n            type: \"Boolean\",\n            default: \"false\",\n            description: \"Create the config file if not existed.\"\n        },\n        {\n            option: \"fix\",\n            type: \"Boolean\",\n            default: false,\n            description: \"Automatically fix problems\",\n            example: \"--fix\"\n        },\n        {\n            option: \"dry-run\",\n            type: \"Boolean\",\n            default: false,\n            description: \"Enable dry-run mode for --fix. Only show result, don't change the file.\",\n            example: \"--fix --dry-run\"\n        },\n        {\n            option: \"debug\",\n            type: \"Boolean\",\n            default: false,\n            description: \"Outputs debugging information\"\n        },\n        {\n            option: \"version\",\n            alias: \"v\",\n            type: \"Boolean\",\n            description: \"Outputs the version number.\"\n        },\n        {\n            heading: \"Using stdin\"\n        },\n        {\n            option: \"stdin\",\n            type: \"Boolean\",\n            default: \"false\",\n            description: \"Lint text provided on <STDIN>.\"\n        },\n        {\n            option: \"stdin-filename\",\n            type: \"String\",\n            description: \"Specify filename to process STDIN as\",\n            example: \"cat ./README.md | textlint --stdin --stdin-filename README.md\"\n        },\n        {\n            heading: \"Output\"\n        },\n        {\n            option: \"output-file\",\n            alias: \"o\",\n            type: \"path::String\",\n            description: \"Enable report to be written to a file.\"\n        },\n        {\n            option: \"format\",\n            alias: \"f\",\n            type: \"String\",\n            description: \"Use a specific output format.\",\n            example: \"--format pretty-error\"\n        },\n        {\n            option: \"color\",\n            type: \"Boolean\",\n            default: \"true\",\n            description: \"Disable color in piped output.\"\n        },\n        {\n            option: \"quiet\",\n            type: \"Boolean\",\n            default: \"false\",\n            description: \"Report errors only.\"\n        },\n        {\n            heading: \"Specifying rules and plugins\"\n        },\n        {\n            option: \"plugin\",\n            type: \"[String]\",\n            description: \"Set plugin package name\",\n            example: \"--plugin plugin-name\"\n        },\n        {\n            option: \"rule\",\n            type: \"[path::String]\",\n            description: \"Set rule package name\"\n        },\n        {\n            option: \"preset\",\n            type: \"[path::String]\",\n            description: \"Set preset package name and load rules from preset package.\"\n        },\n        {\n            option: \"rulesdir\",\n            type: \"[path::String]\",\n            description: \"Set rules from this directory and set all default rules to off.\"\n        },\n        {\n            heading: \"Caching\"\n        },\n        {\n            option: \"cache\",\n            type: \"Boolean\",\n            default: \"false\",\n            description: \"Only check changed files\",\n            example: \"textlint --cache docs/\"\n        },\n        {\n            option: \"cache-location\",\n            type: \"path::String\",\n            description: \"Path to the cache file or directory\",\n            example: \"textlint --cache --cache-location \\\"/Users/user/.textlintcache\\\" docs/\"\n        },\n        {\n            heading: \"Experimental\"\n        },\n        {\n            option: \"experimental\",\n            type: \"Boolean\",\n            default: false,\n            description: \"Enable experimental flag.Some feature use on experimental.\",\n            example: \"--experimental\"\n        }\n    ]\n});\n"]}