{"version":3,"sources":["../src/2.2.2.js"],"names":["matchToReplace","text","pattern","matchFn","match","exec","_num2ja","num","opt","sign","zero","point","zero2nine","ten2thou","suffices","replace","sig","RegExp","$1","int","$2","fract","$3","seisuu","shins","i","length","push","substring","suffix","shin","sens","keta","digits","split","reverse","j","digit","flg","k","suuji","result","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","toNumber","matchedString","index","expected","all","ruleError","fix","replaceTextRange","toKanNumber","ignoreWhenMatched","ignorePattern","test","linter"],"mappings":"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","file":"2.2.2.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport {isUserWrittenNode} from \"./util/node-util\";\nimport ja2num from 'japanese-numerals-to-number';\nfunction matchToReplace(text, pattern, matchFn) {\n    var match = pattern.exec(text);\n    if (match) {\n        return matchFn(text, pattern, match);\n    }\n    return null\n}\n\n// http://www.drk7.jp/MT/archives/001587.html\nfunction _num2ja(num, opt) {\n    var sign = {\n        '+': '',\n        '-': '−'\n    };\n    var zero = '零';\n    var point = '点';\n    var zero2nine = ['〇', '一', '二', '三', '四', '五', '六', '七', '八', '九'];\n    var ten2thou = ['', '十', '百', '千'];\n    var suffices = [\n        '', '万', '億', '兆', '京', '垓', '禾予', '穣', '溝', '澗', '正', '載,', '極', '恒河沙', '阿僧祇', '那由他', '不可思議',\n        '無量大数'\n    ];\n\n    num = num.replace(/,/g, '');\n    num.match(/([+-])?(\\d+)(?:\\.(\\d+))?/i);\n    var sig = RegExp.$1;\n    var int = RegExp.$2;\n    var fract = RegExp.$3;\n    var seisuu = '';\n    var shins = [];\n\n    for (let i = int.length; i > 0; i -= 4) {\n        shins.push(int.substring(i, i - 4));\n    }\n    if (shins.length >= 18) {\n        return suffices[17];\n    }\n\n    var suffix = 0;\n    for (let i = 0; i < shins.length; i++) {\n        var shin = shins[i];\n        if (shin == '0000') {\n            suffix++;\n            continue;\n        }\n        var sens = '';\n        var keta = 0;\n        var digits = shin.split('').reverse();\n        for (var j = 0; j < digits.length; j++) {\n            var digit = digits[j];\n\n            if (opt['fixed4'] || opt['with_arabic']) {\n                if (opt['with_arabic']) {\n                    var flg = 0;\n                    // 余分な 0 を削除する\n                    if (digit == '0') {\n                        for (var k = j + 1; k < digits.length; k++) {\n                            flg += (digits[k] == '0') ? 0 : 1;\n                        }\n                        if (flg == 0) {\n                            digit = '';\n                        }\n                    }\n                    sens = digit + sens;\n                } else {\n                    sens = zero2nine[digit] + sens;\n                }\n            } else {\n                var suuji = (digit == 1 && !opt['p_one'] && keta > 0) ? '' : zero2nine[digit];\n                if (digit != 0) {\n                    sens = suuji + ten2thou[keta] + sens\n                }\n            }\n            keta++;\n        }\n        seisuu = sens + suffices[suffix++] + seisuu;\n    }\n    var result = (sign[sig] || '') + seisuu;\n    result = result || zero;\n    if (fract) {\n        result = result + point + fract;\n    }\n    return result;\n}\n\nfunction reporter(context) {\n    let {Syntax, RuleError, report, fixer, getSource} = context;\n    return {\n        [Syntax.Str](node){\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const text = getSource(node);\n            // 漢数字 -> 算用数字\n            const toNumber = (text, pattern, match) => {\n                const matchedString = match[0];\n                const index = match.index;\n                const expected = matchedString.replace(pattern, function (all, match) {\n                    return all.replace(match, ja2num(match));\n                });\n                const ruleError = new RuleError(`${matchedString} => ${expected}\n数量を表現し、数を数えられるものは算用数字を使用します。任意の数に置き換えても通用する語句がこれに該当します。`, {\n                    index: index,\n                    fix: fixer.replaceTextRange([index, index + matchedString.length], expected)\n                });\n                report(node, ruleError);\n            };\n\n\n            // 算用数字 -> 漢数字\n\n            const toKanNumber = (text, pattern, match) => {\n                const matchedString = match[0];\n                const expected = matchedString.replace(pattern, function (all, match) {\n                    return all.replace(match, _num2ja(match, {'with_arabic': false}));\n                });\n                const index = match.index;\n                report(node, new RuleError(`${matchedString} => ${expected}\n慣用的表現、熟語、概数、固有名詞、副詞など、漢数字を使用することが一般的な語句では漢数字を使います。`, {\n                    index: index,\n                    fix: fixer.replaceTextRange([index, index + matchedString.length], expected)\n                }));\n            };\n\n            // ignorePatternにマッチしたらmatchFnを呼ばないようにする(エラーを無視する)\n            const ignoreWhenMatched = (ignorePattern, matchFn) => {\n                return (text, pattern, match) => {\n                    if (ignorePattern.test(text)) {\n                        return null;\n                    } else {\n                        return matchFn(text, pattern, match);\n                    }\n                }\n            };\n\n            // ＊数えられる数字は算用数字を使う\n            // 数十万、数百億にマッチしないように\"数\"という文字から始まるものは除外\n            // https://github.com/textlint-ja/textlint-rule-preset-jtf-style/pull/23\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)[兆億万]/g,\n                ignoreWhenMatched(/数([一二三四五六七八九十壱弐参拾百〇]+)[兆億万]/g, toNumber)\n            );\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)つ/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)回/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)か月/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)番目/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)進法/g, toNumber);\n            matchToReplace(text, /([一二三四五六七八九十壱弐参拾百〇]+)次元/g, toNumber);\n            matchToReplace(text, /第([一二三四五六七八九十壱弐参拾百〇]+)章/g, toNumber);\n            matchToReplace(text, /第([一二三四五六七八九十壱弐参拾百〇]+)節/g, toNumber);\n            // ＊漢数字を使う\n            // 慣用的表現、熟語、概数、固有名詞、副詞など、漢数字を使用することが一般的な語句では漢数字を使います。\n            matchToReplace(text, /世界(1)/g, toKanNumber);\n            matchToReplace(text, /(1)時的/g, toKanNumber);\n            matchToReplace(text, /(1)部分/g, toKanNumber);\n            matchToReplace(text, /第(3)者/g, toKanNumber);\n            matchToReplace(text, /(1)種/g, toKanNumber);\n            matchToReplace(text, /(1)部の/g, toKanNumber);\n            matchToReplace(text, /(1)番に/g, toKanNumber);\n            matchToReplace(text, /数([0-9]+)倍/g, toKanNumber);\n            matchToReplace(text, /数([0-9]+)[兆億万]/g, toKanNumber);\n            matchToReplace(text, /数([0-9]+)年/g, toKanNumber);\n            matchToReplace(text, /([0-9]+)次関数/g, toKanNumber);\n            matchToReplace(text, /(5)大陸/g, toKanNumber);\n        }\n    }\n}\n\n// 2.2.2. 算用数字と漢数字の使い分け\nexport default {\n    linter: reporter,\n    fixer: reporter\n}"]}