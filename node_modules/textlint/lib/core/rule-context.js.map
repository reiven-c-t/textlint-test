{"version":3,"sources":["../../src/core/rule-context.js"],"names":["RuleContext","assert","require","ruleId","sourceCode","report","textLintConfig","ruleConfig","Object","defineProperty","value","severity","node","ruleError","level","error","Syntax","getSyntax","getFilePath","bind","getSource","RuleError","fixer"],"mappings":"AAAA;AACA;;;;;kBAqBwBA,W;;AAnBxB;;;;AACA;;;;AACA;;;;AACA;;;;AAJA,IAAMC,SAASC,QAAQ,QAAR,CAAf;;AAKA;;;;;;AAMA;;;;;;;;;AASe,SAASF,WAAT,OAA+E;AAAA,MAAzDG,MAAyD,QAAzDA,MAAyD;AAAA,MAAjDC,UAAiD,QAAjDA,UAAiD;AAAA,MAArCC,MAAqC,QAArCA,MAAqC;AAAA,MAA7BC,cAA6B,QAA7BA,cAA6B;AAAA,MAAbC,UAAa,QAAbA,UAAa;;AAC1FC,SAAOC,cAAP,CAAsB,IAAtB,EAA4B,IAA5B,EAAkC,EAACC,OAAOP,MAAR,EAAlC;AACAK,SAAOC,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC,EAACC,OAAOJ,cAAR,EAAtC;AACA,MAAMK,WAAW,+BAAYJ,UAAZ,CAAjB;;AAEA;;;;;AAKA,OAAKF,MAAL,GAAc,UAAUO,IAAV,EAAgBC,SAAhB,EAA2B;AACrCZ,WAAO,EAAEW,mCAAF,CAAP,EAAqC,sCAArC;AACA,QAAIC,wCAAJ,EAAoC;AAChCR,aAAO,EAACF,cAAD,EAASS,UAAT,EAAeD,kBAAf,EAAyBE,oBAAzB,EAAP;AACH,KAFD,MAEO;AACH,UAAMC,QAAQD,UAAUF,QAAV,IAAsB,wBAAcI,KAAlD;AACAV,aAAO,EAACF,cAAD,EAASS,UAAT,EAAeD,UAAUG,KAAzB,EAAgCD,oBAAhC,EAAP;AACH;AACJ,GARD;AASA;;;;AAIA,OAAKG,MAAL,GAAcZ,WAAWa,SAAX,EAAd;AACA;;;;AAIA,OAAKC,WAAL,GAAmBd,WAAWc,WAAX,CAAuBC,IAAvB,CAA4Bf,UAA5B,CAAnB;AACA;;;;AAIA,OAAKgB,SAAL,GAAiBhB,WAAWgB,SAAX,CAAqBD,IAArB,CAA0Bf,UAA1B,CAAjB;AACA;;;;AAIA,OAAKiB,SAAL;AACA;;;;AAIA,OAAKC,KAAL,GAAa,yBAAb;AACH","file":"rule-context.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\nimport RuleFixer from \"../fixer/rule-fixer\";\nimport RuleError from \"./rule-error\";\nimport SeverityLevel from \"../shared/type/SeverityLevel\";\nimport {getSeverity} from \"../shared/rule-severity\";\n/**\n * This callback is displayed as a global member.\n * @callback ReportCallback\n * @param {ReportMessage} message\n */\n\n/**\n * Rule context object is passed to each rule as `context`\n * @param {string} ruleId\n * @param {SourceCode} sourceCode\n * @param {ReportCallback} report\n * @param {Config} textLintConfig\n * @param {Object|boolean} ruleConfig\n * @constructor\n */\nexport default function RuleContext({ruleId, sourceCode, report, textLintConfig, ruleConfig}) {\n    Object.defineProperty(this, \"id\", {value: ruleId});\n    Object.defineProperty(this, \"config\", {value: textLintConfig});\n    const severity = getSeverity(ruleConfig);\n\n    /**\n     * report function that is called in a rule\n     * @param {TxtNode} node\n     * @param {RuleError|any} ruleError error is a RuleError instance or any data\n     */\n    this.report = function (node, ruleError) {\n        assert(!(node instanceof RuleError), \"should be `report(node, ruleError);`\");\n        if (ruleError instanceof RuleError) {\n            report({ruleId, node, severity, ruleError});\n        } else {\n            const level = ruleError.severity || SeverityLevel.error;\n            report({ruleId, node, severity: level, ruleError});\n        }\n    };\n    /**\n     * Node's type values\n     * @type {TextLintNodeType}\n     */\n    this.Syntax = sourceCode.getSyntax();\n    /**\n     * get file path current processing.\n     * @type {Function}\n     */\n    this.getFilePath = sourceCode.getFilePath.bind(sourceCode);\n    /**\n     * get source code text\n     * @type {Function}\n     */\n    this.getSource = sourceCode.getSource.bind(sourceCode);\n    /**\n     * CustomError object\n     * @type {RuleError}\n     */\n    this.RuleError = RuleError;\n    /**\n     * Rule fixer command object\n     * @type {RuleFixer}\n     */\n    this.fixer = new RuleFixer();\n}\n"]}