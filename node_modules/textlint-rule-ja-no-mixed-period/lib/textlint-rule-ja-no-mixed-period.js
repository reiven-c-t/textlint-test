// LICENSE : MIT
"use strict";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var RuleHelper = require("textlint-rule-helper").RuleHelper;
var emojiRegExp = require("emoji-regex")();
var japaneseRegExp = /(?:[々〇〻\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]|[\uD840-\uD87F][\uDC00-\uDFFF]|[ぁ-んァ-ヶ])/;
var exceptionMarkRegExp = /[!?！？\)）」』]/;
var defaultPeriodMark = /[。\.]/;
var defaultOptions = {
    // 優先する句点文字
    periodMark: "。",
    // 末尾に絵文字を置くことを許可するか
    allowEmojiAtEnd: false
};
var reporter = function reporter(context) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
    var Syntax = context.Syntax;
    var RuleError = context.RuleError;
    var report = context.report;
    var fixer = context.fixer;
    var getSource = context.getSource;

    var helper = new RuleHelper(context);
    var periodMark = options.periodMark || defaultOptions.periodMark;
    var allowEmojiAtEnd = options.allowEmojiAtEnd !== undefined ? options.allowEmojiAtEnd : defaultOptions.allowEmojiAtEnd;
    var ignoredNodeTypes = [Syntax.ListItem, Syntax.Link, Syntax.Code, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis];
    return _defineProperty({}, Syntax.Paragraph, function (node) {
        if (helper.isChildNode(node, ignoredNodeTypes)) {
            return;
        }
        var lastNode = node.children[node.children.length - 1];
        if (lastNode === undefined || lastNode.type !== Syntax.Str) {
            return;
        }
        var lastStrText = getSource(lastNode);
        // 日本語が含まれていない文章は無視する
        if (!japaneseRegExp.test(lastStrText)) {
            return;
        }
        // サロゲートペアを考慮した文字列長・文字アクセス
        var characters = [].concat(_toConsumableArray(lastStrText));
        var lastIndex = characters.length - 1;
        var lastChar = characters[lastIndex];
        if (lastChar === undefined) {
            return;
        }
        // 文末がスペースである場合
        // TODO: fixに対応したい
        if (/\s/.test(lastChar)) {
            report(lastNode, new RuleError("文末が\"" + periodMark + "\"で終わっていません。末尾に不要なスペースがあります。", {
                index: lastIndex
            }));
            return;
        }
        // 末尾の"文字"が句点以外で末尾に使われる文字であるときは無視する
        // 例外: 感嘆符
        // 例外: 「」 () （）『』
        // http://ncode.syosetu.com/n8977bb/12/
        // https://ja.wikipedia.org/wiki/%E7%B5%82%E6%AD%A2%E7%AC%A6
        if (exceptionMarkRegExp.test(lastChar)) {
            return;
        }
        if (allowEmojiAtEnd && emojiRegExp.test(lastChar)) {
            return;
        }
        if (lastChar === periodMark) {
            return;
        }
        // "." であるなら "。"に変換
        // そうでない場合は末尾に"。"を追加する
        var fix = null;
        if (defaultPeriodMark.test(lastChar)) {
            fix = fixer.replaceTextRange([lastIndex, lastIndex + 1], periodMark);
        } else {
            fix = fixer.replaceTextRange([lastIndex + 1, lastIndex + 1], periodMark);
        }
        report(lastNode, new RuleError("文末が\"" + periodMark + "\"で終わっていません。", {
            index: lastIndex,
            fix: fix
        }));
    });
};

module.exports = {
    linter: reporter,
    fixer: reporter
};
//# sourceMappingURL=textlint-rule-ja-no-mixed-period.js.map