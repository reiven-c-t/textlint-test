{"version":3,"sources":["../../src/linter/linter-processor.js"],"names":["LinterProcessor","processor","messageProcessManager","config","ruleCreatorSet","filterRuleCreatorSet","sourceCode","ext","preProcess","postProcess","task","process","then","result","messages","filePath","length"],"mappings":"AAAA;AACA;;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IACqBA,e;AACjB;;;;AAIA,6BAAYC,SAAZ,EAAuBC,qBAAvB,EAA8C;AAAA;;AAC1C,aAAKD,SAAL,GAAiBA,SAAjB;AACA,aAAKC,qBAAL,GAA6BA,qBAA7B;AACH;;AAED;;;;;;;;;;;;sCAQoE;AAAA;;AAAA,gBAA3DC,MAA2D,QAA3DA,MAA2D;AAAA,gBAAnDC,cAAmD,QAAnDA,cAAmD;AAAA,gBAAnCC,oBAAmC,QAAnCA,oBAAmC;AAAA,gBAAbC,UAAa,QAAbA,UAAa;;AAChE,kCAAOH,UAAUC,cAAV,IAA4BE,UAAnC;;AADgE,uCAE9B,KAAKL,SAAL,CAAeA,SAAf,CAAyBK,WAAWC,GAApC,CAF8B;AAAA,gBAEzDC,UAFyD,wBAEzDA,UAFyD;AAAA,gBAE7CC,WAF6C,wBAE7CA,WAF6C;;AAGhE,kCAAO,OAAOD,UAAP,KAAsB,UAAtB,IAAoC,OAAOC,WAAP,KAAuB,UAAlE,EACI,sDADJ;AAEA,gBAAMC,OAAO,yBAAe;AACxBP,8BADwB;AAExBC,8CAFwB;AAGxBC,0DAHwB;AAIxBC;AAJwB,aAAf,CAAb;AAMA,mBAAO,qBAAWK,OAAX,CAAmBD,IAAnB,EAAyBE,IAAzB,CAA8B,oBAAY;AAC7C,oBAAMC,SAASJ,YAAYK,QAAZ,EAAsBR,WAAWS,QAAjC,CAAf;AACAF,uBAAOC,QAAP,GAAkB,MAAKZ,qBAAL,CAA2BS,OAA3B,CAAmCE,OAAOC,QAA1C,CAAlB;AACA,oBAAID,OAAOE,QAAP,IAAmB,IAAvB,EAA6B;AACzBF,2BAAOE,QAAP,eAA4BT,WAAWC,GAAvC;AACH;AACD,sCAAOM,OAAOE,QAAP,IAAmBF,OAAOC,QAAP,CAAgBE,MAAhB,IAA0B,CAApD,EAAuD,mDAAvD;AACA,uBAAOH,MAAP;AACH,aARM,CAAP;AASH;;;;;;kBAtCgBb,e","file":"linter-processor.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport assert from \"assert\";\nimport LinterTask from \"../task/linter-task\";\nimport TaskRunner from \"../task/task-runner\";\nexport default class LinterProcessor {\n    /**\n     * @param {Processor} processor\n     * @param {MessageProcessManager} messageProcessManager\n     */\n    constructor(processor, messageProcessManager) {\n        this.processor = processor;\n        this.messageProcessManager = messageProcessManager;\n    }\n\n    /**\n     * Run linter process\n     * @param {Config} config\n     * @param {RuleCreatorSet} ruleCreatorSet\n     * @param {RuleCreatorSet} filterRuleCreatorSet\n     * @param {SourceCode} sourceCode\n     * @returns {Promise.<TextLintResult>}\n     */\n    process({config, ruleCreatorSet, filterRuleCreatorSet, sourceCode}) {\n        assert(config && ruleCreatorSet && sourceCode);\n        const {preProcess, postProcess} = this.processor.processor(sourceCode.ext);\n        assert(typeof preProcess === \"function\" && typeof postProcess === \"function\",\n            \"processor should implement {preProcess, postProcess}\");\n        const task = new LinterTask({\n            config,\n            ruleCreatorSet,\n            filterRuleCreatorSet,\n            sourceCode\n        });\n        return TaskRunner.process(task).then(messages => {\n            const result = postProcess(messages, sourceCode.filePath);\n            result.messages = this.messageProcessManager.process(result.messages);\n            if (result.filePath == null) {\n                result.filePath = `<Unkown${sourceCode.ext}>`;\n            }\n            assert(result.filePath && result.messages.length >= 0, \"postProcess should return { messages, filePath } \");\n            return result;\n        });\n    }\n}\n"]}