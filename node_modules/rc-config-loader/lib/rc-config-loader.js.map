{"version":3,"sources":["../src/rc-config-loader.js"],"names":["path","require","debug","requireUncached","JSON5","fs","pathExists","objectAssign","keys","emptyConfig","defaultLoaderByExt","loadJSConfigFile","loadJSONConfigFile","loadYAMLConfigFile","defaultOptions","packageJSON","defaultExtension","cwd","process","module","exports","rcConfigLoader","pkgName","opts","configFileName","packageJSONFieldName","fieldName","parts","splitPath","loaders","Array","isArray","map","extension","loaderByExt","findConfig","exts","length","ext","shift","configLoc","join","sync","loader","i","result","pkgJSONLoc","pkgJSON","pop","x","resolve","split","sep","filename","filePath","suppress","e","message","parse","readFile","readFileSync","yaml","safeLoad"],"mappings":"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","file":"rc-config-loader.js","sourcesContent":["// MIT © 2017 azu\n// MIT © Zoltan Kochan\n// Original https://github.com/zkochan/rcfile\n\"use strict\";\nconst path = require(\"path\");\nconst debug = require(\"debug\")(\"rc-config-loader\");\nconst requireUncached = require(\"require-uncached\");\nconst JSON5 = require(\"json5\");\nconst fs = require(\"fs\");\nconst pathExists = require(\"path-exists\");\nconst objectAssign = require(\"object-assign\");\nconst keys = require(\"object-keys\");\nconst emptyConfig = {};\n\nconst defaultLoaderByExt = {\n    \".js\": loadJSConfigFile,\n    \".json\": loadJSONConfigFile,\n    \".yaml\": loadYAMLConfigFile,\n    \".yml\": loadYAMLConfigFile,\n};\n\nconst defaultOptions = {\n    // does look for `package.json`\n    packageJSON: false,\n    // treat default(no ext file) as some extension\n    defaultExtension: \".json\",\n    cwd: process.cwd()\n};\n/**\n * @param {string} pkgName\n * @param {rcConfigLoaderOption} [opts]\n * @returns {object}\n */\nmodule.exports = function rcConfigLoader(pkgName, opts = {}) {\n    // path/to/config or basename of config file.\n    const configFileName = opts.configFileName || `.${pkgName}rc`;\n    const defaultExtension = opts.defaultExtension || defaultOptions.defaultExtension;\n    const cwd = opts.cwd || defaultOptions.cwd;\n    const packageJSON = opts.packageJSON || defaultOptions.packageJSON;\n    const packageJSONFieldName = typeof packageJSON === \"object\"\n        ? packageJSON.fieldName\n        : pkgName;\n\n    const parts = splitPath(cwd);\n\n    const loaders = Array.isArray(defaultExtension)\n        ? defaultExtension.map((extension) => defaultLoaderByExt[extension])\n        : defaultLoaderByExt[defaultExtension];\n\n    const loaderByExt = objectAssign({}, defaultLoaderByExt, {\n        \"\": loaders,\n    });\n\n    return findConfig(parts);\n\n    /**\n     * @returns {object} always return object\n     */\n    function findConfig() {\n        const exts = keys(loaderByExt);\n        while (exts.length) {\n            const ext = exts.shift();\n            const configLoc = join(parts, configFileName + ext);\n            if (!pathExists.sync(configLoc)) {\n                continue;\n            }\n            const loaders = loaderByExt[ext];\n            if (!Array.isArray(loaders)) {\n                const loader = loaders;\n                return loader(configLoc);\n            }\n            for (let i = 0; i < loaders.length; i++) {\n                const loader = loaders[i];\n                const result = loader(configLoc, true);\n                if (result) {\n                    return result;\n                }\n            }\n        }\n\n        if (packageJSON) {\n            const pkgJSONLoc = join(parts, \"package.json\");\n            if (pathExists.sync(pkgJSONLoc)) {\n                const pkgJSON = require(pkgJSONLoc);\n                if (pkgJSON[packageJSONFieldName]) {\n                    return pkgJSON[packageJSONFieldName];\n                }\n            }\n        }\n        if (parts.pop()) {\n            return findConfig();\n        }\n        return emptyConfig;\n    }\n};\n\nfunction splitPath(x) {\n    return path.resolve(x || \"\").split(path.sep);\n}\n\nfunction join(parts, filename) {\n    return path.resolve(parts.join(path.sep) + path.sep, filename);\n}\n\nfunction loadJSConfigFile(filePath, suppress) {\n    debug(`Loading JS config file: ${filePath}`);\n    try {\n        return requireUncached(filePath);\n    } catch (e) {\n        debug(`Error reading JavaScript file: ${filePath}`);\n        if (!suppress) {\n            e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;\n            throw e;\n        }\n    }\n}\n\nfunction loadJSONConfigFile(filePath, suppress) {\n    debug(`Loading JSON config file: ${filePath}`);\n\n    try {\n        return JSON5.parse(readFile(filePath));\n    } catch (e) {\n        debug(`Error reading JSON file: ${filePath}`);\n        if (!suppress) {\n            e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;\n            throw e;\n        }\n    }\n}\n\nfunction readFile(filePath) {\n    return fs.readFileSync(filePath, \"utf8\");\n}\n\nfunction loadYAMLConfigFile(filePath, suppress) {\n    debug(`Loading YAML config file: ${filePath}`);\n\n    // lazy load YAML to improve performance when not used\n    const yaml = require(\"js-yaml\");\n\n    try {\n        // empty YAML file can be null, so always use\n        return yaml.safeLoad(readFile(filePath)) || {};\n    } catch (e) {\n        debug(`Error reading YAML file: ${filePath}`);\n        if (!suppress) {\n            e.message = `Cannot read config file: ${filePath}\\nError: ${e.message}`;\n            throw e;\n        }\n    }\n}\n"]}