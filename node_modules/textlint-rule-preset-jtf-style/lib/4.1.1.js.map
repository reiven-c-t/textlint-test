{"version":3,"sources":["../src/4.1.1.js"],"names":["brackets","leftBrackets","map","RegExp","bracket","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","text","forEach","pattern","index","match","fix","replaceTextRange","linter"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;;;AAOA;;AACA;;;;AACA,IAAMA,WAAW,CACb,GADa,EACR,GADQ,EACH,KADG,CAAjB;AAGA,IAAMC,eAAeD,SAASE,GAAT,CAAa,mBAAW;AACzC,WAAO,IAAIC,MAAJ,CAAW,UAAUC,OAArB,EAA8B,GAA9B,CAAP;AACH,CAFoB,CAArB;AAGA,IAAIC,WAAW,SAASA,QAAT,CAAkBC,OAAlB,EAA2B;AAAA,QACjCC,MADiC,GACcD,OADd,CACjCC,MADiC;AAAA,QACzBC,SADyB,GACcF,OADd,CACzBE,SADyB;AAAA,QACdC,MADc,GACcH,OADd,CACdG,MADc;AAAA,QACNC,KADM,GACcJ,OADd,CACNI,KADM;AAAA,QACCC,SADD,GACcL,OADd,CACCK,SADD;;AAEtC,+BACKJ,OAAOK,GADZ,YACiBC,IADjB,EACsB;AACd,YAAI,CAAC,iCAAkBA,IAAlB,EAAwBP,OAAxB,CAAL,EAAuC;AACnC;AACH;AACD,YAAIQ,OAAOH,UAAUE,IAAV,CAAX;AACAZ,qBAAac,OAAb,CAAqB,mBAAW;AAC5B,kDAAqBD,IAArB,EAA2BE,OAA3B,EAAoCD,OAApC,CAA4C,iBAAS;AAAA,oBAC1CE,KAD0C,GACjCC,KADiC,CAC1CD,KAD0C;;AAEjDR,uBAAOI,IAAP,EAAa,IAAIL,SAAJ,CAAc,kCAAd,EAAkD;AAC3DS,2BAAOA,KADoD;AAE3DE,yBAAKT,MAAMU,gBAAN,CAAuB,CAACH,KAAD,EAAQA,QAAQ,CAAhB,CAAvB,EAA2C,EAA3C;AAFsD,iBAAlD,CAAb;AAIH,aAND;AAOH,SARD;AASH,KAfL;AAiBH,CAnBD;kBAoBe;AACXI,YAAQhB,QADG;AAEXK,WAAOL;AAFI,C","file":"4.1.1.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n4.1.1. 句点(。)\n句点(。)は「全角」で表記します。\n句点は文の終わりに付けます。\n文中にかぎかっこが入る場合は、閉じかっこの前に句点を打ちません。\n文中に丸かっこが入る場合も閉じかっこの前に句点を打ちません。。\n */\nimport {isUserWrittenNode} from \"./util/node-util\";\nimport {matchCaptureGroupAll} from \"match-index\";\nconst brackets = [\n    \"」\", \"）\", \"\\\\)\"\n];\nconst leftBrackets = brackets.map(bracket => {\n    return new RegExp(\"\\(。\\)\" + bracket, \"g\");\n});\nvar reporter = function reporter(context) {\n    let {Syntax, RuleError, report, fixer, getSource} = context;\n    return {\n        [Syntax.Str](node){\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            let text = getSource(node);\n            leftBrackets.forEach(pattern => {\n                matchCaptureGroupAll(text, pattern).forEach(match => {\n                    const {index} = match;\n                    report(node, new RuleError(\"文中にかぎかっこが入る場合は、閉じかっこの前に句点を打ちません。\", {\n                        index: index,\n                        fix: fixer.replaceTextRange([index, index + 1], \"\")\n                    }));\n                });\n            });\n        }\n    };\n};\nexport default {\n    linter: reporter,\n    fixer: reporter\n};"]}