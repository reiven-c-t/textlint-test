// MIT © 2017 azu
// MIT © Zoltan Kochan
// Original https://github.com/zkochan/rcfile
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var path = require("path");
var debug = require("debug")("rc-config-loader");
var requireUncached = require("require-uncached");
var JSON5 = require("json5");
var fs = require("fs");
var pathExists = require("path-exists");
var objectAssign = require("object-assign");
var keys = require("object-keys");
var emptyConfig = {};

var defaultLoaderByExt = {
    ".js": loadJSConfigFile,
    ".json": loadJSONConfigFile,
    ".yaml": loadYAMLConfigFile,
    ".yml": loadYAMLConfigFile
};

var defaultOptions = {
    // does look for `package.json`
    packageJSON: false,
    // treat default(no ext file) as some extension
    defaultExtension: ".json",
    cwd: process.cwd()
};
/**
 * @param {string} pkgName
 * @param {rcConfigLoaderOption} [opts]
 * @returns {object}
 */
module.exports = function rcConfigLoader(pkgName) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    // path/to/config or basename of config file.
    var configFileName = opts.configFileName || "." + pkgName + "rc";
    var defaultExtension = opts.defaultExtension || defaultOptions.defaultExtension;
    var cwd = opts.cwd || defaultOptions.cwd;
    var packageJSON = opts.packageJSON || defaultOptions.packageJSON;
    var packageJSONFieldName = (typeof packageJSON === "undefined" ? "undefined" : _typeof(packageJSON)) === "object" ? packageJSON.fieldName : pkgName;

    var parts = splitPath(cwd);

    var loaders = Array.isArray(defaultExtension) ? defaultExtension.map(function (extension) {
        return defaultLoaderByExt[extension];
    }) : defaultLoaderByExt[defaultExtension];

    var loaderByExt = objectAssign({}, defaultLoaderByExt, {
        "": loaders
    });

    return findConfig(parts);

    /**
     * @returns {object} always return object
     */
    function findConfig() {
        var exts = keys(loaderByExt);
        while (exts.length) {
            var ext = exts.shift();
            var configLoc = join(parts, configFileName + ext);
            if (!pathExists.sync(configLoc)) {
                continue;
            }
            var _loaders = loaderByExt[ext];
            if (!Array.isArray(_loaders)) {
                var loader = _loaders;
                return loader(configLoc);
            }
            for (var i = 0; i < _loaders.length; i++) {
                var _loader = _loaders[i];
                var result = _loader(configLoc, true);
                if (result) {
                    return result;
                }
            }
        }

        if (packageJSON) {
            var pkgJSONLoc = join(parts, "package.json");
            if (pathExists.sync(pkgJSONLoc)) {
                var pkgJSON = require(pkgJSONLoc);
                if (pkgJSON[packageJSONFieldName]) {
                    return pkgJSON[packageJSONFieldName];
                }
            }
        }
        if (parts.pop()) {
            return findConfig();
        }
        return emptyConfig;
    }
};

function splitPath(x) {
    return path.resolve(x || "").split(path.sep);
}

function join(parts, filename) {
    return path.resolve(parts.join(path.sep) + path.sep, filename);
}

function loadJSConfigFile(filePath, suppress) {
    debug("Loading JS config file: " + filePath);
    try {
        return requireUncached(filePath);
    } catch (e) {
        debug("Error reading JavaScript file: " + filePath);
        if (!suppress) {
            e.message = "Cannot read config file: " + filePath + "\nError: " + e.message;
            throw e;
        }
    }
}

function loadJSONConfigFile(filePath, suppress) {
    debug("Loading JSON config file: " + filePath);

    try {
        return JSON5.parse(readFile(filePath));
    } catch (e) {
        debug("Error reading JSON file: " + filePath);
        if (!suppress) {
            e.message = "Cannot read config file: " + filePath + "\nError: " + e.message;
            throw e;
        }
    }
}

function readFile(filePath) {
    return fs.readFileSync(filePath, "utf8");
}

function loadYAMLConfigFile(filePath, suppress) {
    debug("Loading YAML config file: " + filePath);

    // lazy load YAML to improve performance when not used
    var yaml = require("js-yaml");

    try {
        // empty YAML file can be null, so always use
        return yaml.safeLoad(readFile(filePath)) || {};
    } catch (e) {
        debug("Error reading YAML file: " + filePath);
        if (!suppress) {
            e.message = "Cannot read config file: " + filePath + "\nError: " + e.message;
            throw e;
        }
    }
}
//# sourceMappingURL=rc-config-loader.js.map