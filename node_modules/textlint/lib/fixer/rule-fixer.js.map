{"version":3,"sources":["../../src/fixer/rule-fixer.js"],"names":["insertTextAt","index","text","range","isAbsolute","insertTextAtAbsolute","RuleFixer","node","replaceText","replaceTextRange"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA;;;;;;;AAOA;;;;;;;AAOA,SAASA,YAAT,CAAsBC,KAAtB,EAA6BC,IAA7B,EAAmC;AAC/B,0BAAOA,IAAP,EAAa,qBAAb;AACA,WAAO;AACHC,eAAO,CAACF,KAAD,EAAQA,KAAR,CADJ;AAEHC,kBAFG;AAGHE,oBAAY;AAHT,KAAP;AAKH;AACD;;;;;;;AAOA,SAASC,oBAAT,CAA8BJ,KAA9B,EAAqCC,IAArC,EAA2C;AACvC,0BAAOA,IAAP,EAAa,qBAAb;AACA,WAAO;AACHC,eAAO,CAACF,KAAD,EAAQA,KAAR,CADJ;AAEHC,kBAFG;AAGHE,oBAAY;AAHT,KAAP;AAKH;AACD;;;;;;;;IAOqBE,S;;;;;;;;AACjB;;;;;;;wCAOgBC,I,EAAML,I,EAAM;AACxB,mBAAOG,qBAAqBE,KAAKJ,KAAL,CAAW,CAAX,CAArB,EAAoCD,IAApC,CAAP;AACH;;AAED;;;;;;;;;;;;6CASqBC,K,EAAOD,I,EAAM;AAC9B,mBAAOF,aAAaG,MAAM,CAAN,CAAb,EAAuBD,IAAvB,CAAP;AACH;;AAED;;;;;;;;;;yCAOiBK,I,EAAML,I,EAAM;AACzB,mBAAOG,qBAAqBE,KAAKJ,KAAL,CAAW,CAAX,CAArB,EAAoCD,IAApC,CAAP;AACH;;AAED;;;;;;;;;;;;8CASsBC,K,EAAOD,I,EAAM;AAC/B,mBAAOF,aAAaG,MAAM,CAAN,CAAb,EAAuBD,IAAvB,CAAP;AACH;;AAED;;;;;;;;;;oCAOYK,I,EAAML,I,EAAM;AACpB,mBAAO;AACHC,uBAAOI,KAAKJ,KADT;AAEHD,0BAFG;AAGHE,4BAAY;AAHT,aAAP;AAKH;;AAED;;;;;;;;;;;;yCASiBD,K,EAAOD,I,EAAM;AAC1B,mBAAO;AACHC,4BADG;AAEHD,0BAFG;AAGHE,4BAAY;AAHT,aAAP;AAKH;;AAED;;;;;;;;;+BAMOG,I,EAAM;AACT,mBAAO,KAAKC,WAAL,CAAiBD,IAAjB,EAAuB,EAAvB,CAAP;AACH;;AAED;;;;;;;;;;;oCAQYJ,K,EAAO;AACf,mBAAO,KAAKM,gBAAL,CAAsBN,KAAtB,EAA6B,EAA7B,CAAP;AACH;;;;;;kBArGgBG,S","file":"rule-fixer.js","sourcesContent":["import assert from \"assert\";\n\n/**\n * Fix Command object has `range` and `text`.\n * @typedef {Object} FixCommand\n * @property {number[]} range range is an array of numbers : [start, end]\n * @property {string} text text is replace value.\n * @property {boolean} isAbsolute if `range` is relative, should be `false`\n */\n/**\n * Creates a fix command that inserts text at the specified index in the source text.\n * @param {number} index The 0-based index at which to insert the new text.\n * @param {string} text The text to insert.\n * @returns {FixCommand} The fix command.\n * @private\n */\nfunction insertTextAt(index, text) {\n    assert(text, \"text must be string\");\n    return {\n        range: [index, index],\n        text,\n        isAbsolute: false\n    };\n}\n/**\n * Creates a fix command that inserts text at the specified index in the source text.\n * @param {number} index The 0-based index at which to insert the new text.\n * @param {string} text The text to insert.\n * @returns {FixCommand} The fix command.\n * @private\n */\nfunction insertTextAtAbsolute(index, text) {\n    assert(text, \"text must be string\");\n    return {\n        range: [index, index],\n        text,\n        isAbsolute: true\n    };\n}\n/**\n * Creates code fixing commands for rules.\n * It create command for fixing texts.\n * The `range` arguments of these command is should be **relative** value from reported node.\n * See {@link SourceLocation} class for more detail.\n * @constructor\n */\nexport default class RuleFixer {\n    /**\n     * Creates a fix command that inserts text after the given node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {TxtNode} node The node or token to insert after.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    insertTextAfter(node, text) {\n        return insertTextAtAbsolute(node.range[1], text);\n    }\n\n    /**\n     * Creates a fix command that inserts text after the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {number[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     *      The `range` should be **relative** value from reported node.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    insertTextAfterRange(range, text) {\n        return insertTextAt(range[1], text);\n    }\n\n    /**\n     * Creates a fix command that inserts text before the given node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {TxtNode} node The node or token to insert before.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    insertTextBefore(node, text) {\n        return insertTextAtAbsolute(node.range[0], text);\n    }\n\n    /**\n     * Creates a fix command that inserts text before the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {number[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     *      The `range` should be **relative** value from reported node.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    insertTextBeforeRange(range, text) {\n        return insertTextAt(range[0], text);\n    }\n\n    /**\n     * Creates a fix command that replaces text at the node or token.\n     * The fix is not applied until applyFixes() is called.\n     * @param {TxtNode} node The node or token to remove.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    replaceText(node, text) {\n        return {\n            range: node.range,\n            text,\n            isAbsolute: true\n        };\n    }\n\n    /**\n     * Creates a fix command that replaces text at the specified range in the source text.\n     * The fix is not applied until applyFixes() is called.\n     * @param {number[]} range The range to replace, first item is start of range, second\n     *      is end of range.\n     *      The `range` should be **relative** value from reported node.\n     * @param {string} text The text to insert.\n     * @returns {FixCommand} The fix command.\n     */\n    replaceTextRange(range, text) {\n        return {\n            range,\n            text,\n            isAbsolute: false\n        };\n    }\n\n    /**\n     * Creates a fix command that removes the node or token from the source.\n     * The fix is not applied until applyFixes() is called.\n     * @param {TxtNode} node The node or token to remove.\n     * @returns {FixCommand} The fix command.\n     */\n    remove(node) {\n        return this.replaceText(node, \"\");\n    }\n\n    /**\n     * Creates a fix command that removes the specified range of text from the source.\n     * The fix is not applied until applyFixes() is called.\n     * @param {number[]} range The range to remove, first item is start of range, second\n     *      is end of range.\n     *      The `range` should be **relative** value from reported node.\n     * @returns {FixCommand} The fix command.\n     */\n    removeRange(range) {\n        return this.replaceTextRange(range, \"\");\n    }\n}\n"]}