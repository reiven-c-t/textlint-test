{"version":3,"sources":["../../src/config/config-initializer.js"],"names":["Promise","require","fs","path","ObjectAssign","isFile","readPkg","getTextlintDependencyNames","dir","then","dependencies","pkg","devDependencies","mergedDependencies","pkgNames","Object","keys","filter","ruleOrFilter","pkgName","indexOf","FILTER_RULE_NAME_PREFIX","RULE_NAME_PREFIX","catch","arrayToObject","array","defaultValue","object","forEach","item","init","initializeConfig","rcFile","CONFIG_FILE_NAME","filePath","resolve","error","filters","map","filterName","replace","rules","defaultTextlintRc","output","JSON","stringify","writeFileSync","module","exports"],"mappings":"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","file":"config-initializer.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst Promise = require(\"bluebird\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst ObjectAssign = require(\"object-assign\");\nconst isFile = require(\"is-file\");\nconst readPkg = require(\"read-pkg\");\nimport Config from \"../config/config\";\nimport Logger from \"../util/logger\";\n\n/**\n * read package.json if found it\n * @param {string} dir\n * @returns {Promise.<Array.<String>>}\n */\nconst getTextlintDependencyNames = (dir) => {\n    return readPkg(dir).then(pkg => {\n        const dependencies = pkg.dependencies || {};\n        const devDependencies = pkg.devDependencies || {};\n        const mergedDependencies = ObjectAssign({}, dependencies, devDependencies);\n        const pkgNames = Object.keys(mergedDependencies);\n        return pkgNames.filter(pkgName => {\n            const ruleOrFilter = pkgName.indexOf(Config.FILTER_RULE_NAME_PREFIX) !== -1 || pkgName.indexOf(Config.RULE_NAME_PREFIX) !== -1;\n            if (pkgName === \"textlint-rule-helper\") {\n                return false;\n            }\n            return ruleOrFilter;\n        });\n    }).catch(() => {\n        return [];\n    });\n};\n\n/**\n * create object that fill with `defaultValue`\n * @param {Array} array\n * @param {*} defaultValue\n * @returns {Object}\n */\nconst arrayToObject = (array, defaultValue) => {\n    const object = {};\n    array.forEach(item => {\n        object[item] = defaultValue;\n    });\n    return object;\n};\n/**\n * Initializer class for config of textlint.\n */\nconst init = {\n    /**\n     * Create .textlintrc file\n     * @params {string} dir The directory of .textlintrc file\n     * @returns {Promise.<number>} The exit code for the operation.\n     */\n    initializeConfig(dir) {\n        return getTextlintDependencyNames(dir).then(pkgNames => {\n            const rcFile = \".\" + Config.CONFIG_FILE_NAME + \"rc\";\n            const filePath = path.resolve(dir, rcFile);\n            if (isFile(filePath)) {\n                Logger.error(`${ rcFile } is already existed.`);\n                return Promise.resolve(1);\n            }\n            const filters = pkgNames.filter(pkgName => {\n                return pkgName.indexOf(Config.FILTER_RULE_NAME_PREFIX) !== -1;\n            }).map(filterName => {\n                return filterName.replace(Config.FILTER_RULE_NAME_PREFIX, \"\");\n            });\n            const rules = pkgNames.filter(pkgName => {\n                return pkgName.indexOf(Config.RULE_NAME_PREFIX) !== -1;\n            }).map(filterName => {\n                return filterName.replace(Config.RULE_NAME_PREFIX, \"\");\n            });\n            const defaultTextlintRc = {\n                \"filters\": arrayToObject(filters, true),\n                \"rules\": arrayToObject(rules, true)\n            };\n            const output = JSON.stringify(defaultTextlintRc, null, 2);\n            fs.writeFileSync(filePath, output);\n            return Promise.resolve(0);\n        });\n    }\n};\nmodule.exports = init;\n"]}