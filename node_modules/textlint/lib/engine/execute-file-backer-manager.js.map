{"version":3,"sources":["../../src/engine/execute-file-backer-manager.js"],"names":["Promise","require","ExecuteFileBackerManager","backers","_backers","backer","push","index","indexOf","splice","files","executeFile","unExecutedResults","resultPromises","filter","filePath","shouldExecute","every","_createFakeResult","map","then","forEach","didExecute","result","concat","all","afterAll","results","messages"],"mappings":"AAAA;AACA;;;;;;;;;;AACA,IAAMA,UAAUC,QAAQ,UAAR,CAAhB;;IACqBC,wB;AACjB;;;;AAIA,wCAA0B;AAAA,YAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACtB,aAAKC,QAAL,GAAgBD,OAAhB;AACH;;AAED;;;;;;;4BAGIE,M,EAAQ;AACR,iBAAKD,QAAL,CAAcE,IAAd,CAAmBD,MAAnB;AACH;;AAED;;;;;;+BAGOA,M,EAAQ;AACX,gBAAME,QAAQ,KAAKH,QAAL,CAAcI,OAAd,CAAsBH,MAAtB,CAAd;AACA,gBAAIE,UAAU,CAAC,CAAf,EAAkB;AACd,qBAAKH,QAAL,CAAcK,MAAd,CAAqBF,KAArB,EAA4B,CAA5B;AACH;AACJ;;AAED;;;;;;;;;gCAMQG,K,EAAOC,W,EAAa;AAAA;;AACxB,gBAAMC,oBAAoB,EAA1B;AACA,gBAAMC,iBAAiBH,MAAMI,MAAN,CAAa,UAACC,QAAD,EAAc;AAC9C,oBAAMC,gBAAgB,MAAKZ,QAAL,CAAca,KAAd,CAAoB,UAACZ,MAAD,EAAY;AAClD,2BAAOA,OAAOW,aAAP,CAAqB,EAACD,kBAAD,EAArB,CAAP;AACH,iBAFqB,CAAtB;AAGA;AACA,oBAAI,CAACC,aAAL,EAAoB;AAChBJ,sCAAkBN,IAAlB,CAAuB,MAAKY,iBAAL,CAAuBH,QAAvB,CAAvB;AACH;AACD,uBAAOC,aAAP;AACH,aATsB,EASpBG,GAToB,CAShB,UAACJ,QAAD,EAAc;AACjB,uBAAOJ,YAAYI,QAAZ,EAAsBK,IAAtB,CAA2B,kBAAU;AACxC,0BAAKhB,QAAL,CAAciB,OAAd,CAAsB,UAAChB,MAAD,EAAY;AAC9BA,+BAAOiB,UAAP,CAAkB,EAACC,cAAD,EAAlB;AACH,qBAFD;AAGA,2BAAOA,MAAP;AACH,iBALM,CAAP;AAMH,aAhBsB,EAgBpBC,MAhBoB,CAgBbZ,iBAhBa,CAAvB;AAiBA;AACA,mBAAOZ,QAAQyB,GAAR,CAAYZ,cAAZ,EAA4BO,IAA5B,CAAiC,mBAAW;AAC/C,sBAAKhB,QAAL,CAAciB,OAAd,CAAsB,UAAChB,MAAD,EAAY;AAC9BA,2BAAOqB,QAAP;AACH,iBAFD;AAGA,uBAAOC,OAAP;AACH,aALM,CAAP;AAMH;;AAED;;;;;;;;;0CAMkBZ,Q,EAAU;AACxB,mBAAO;AACHA,kCADG;AAEHa,0BAAU;AAFP,aAAP;AAIH;;;;;;kBAvEgB1B,wB","file":"execute-file-backer-manager.js","sourcesContent":["// MIT Â© 2016 azu\n\"use strict\";\nconst Promise = require(\"bluebird\");\nexport default class ExecuteFileBackerManager {\n    /**\n     * create MessageProcessManager with backers\n     * @param {function()[]} backers\n     */\n    constructor(backers = []) {\n        this._backers = backers;\n    }\n\n    /**\n     * @param {AbstractBacker} backer\n     */\n    add(backer) {\n        this._backers.push(backer);\n    }\n\n    /**\n     * @param {AbstractBacker} backer\n     */\n    remove(backer) {\n        const index = this._backers.indexOf(backer);\n        if (index !== -1) {\n            this._backers.splice(index, 1);\n        }\n    }\n\n    /**\n     * process `messages` with registered processes\n     * @param {string[]} files\n     * @param {function(filePath: string):Promise} executeFile\n     * @returns {Promise.<TextLintResult[]>}\n     */\n    process(files, executeFile) {\n        const unExecutedResults = [];\n        const resultPromises = files.filter((filePath) => {\n            const shouldExecute = this._backers.every((backer) => {\n                return backer.shouldExecute({filePath});\n            });\n            // add fake unExecutedResults for un-executed file.\n            if (!shouldExecute) {\n                unExecutedResults.push(this._createFakeResult(filePath));\n            }\n            return shouldExecute;\n        }).map((filePath) => {\n            return executeFile(filePath).then(result => {\n                this._backers.forEach((backer) => {\n                    backer.didExecute({result});\n                });\n                return result;\n            });\n        }).concat(unExecutedResults);\n        // wait all resolved, and call afterAll\n        return Promise.all(resultPromises).then(results => {\n            this._backers.forEach((backer) => {\n                backer.afterAll();\n            });\n            return results;\n        });\n    }\n\n    /**\n     * create fake result object\n     * @param {string} filePath\n     * @returns {TextLintResult}\n     * @private\n     */\n    _createFakeResult(filePath) {\n        return {\n            filePath,\n            messages: []\n        };\n    }\n}\n"]}