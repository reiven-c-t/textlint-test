{"version":3,"sources":["../src/4.3.1.js"],"names":["rx","replaceSymbol","symbol","newSymbol","Error","reporter","context","Syntax","RuleError","report","fixer","getSource","Str","node","text","matchRegExp","forEach","index","match","fix","replaceTextRange","linter"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;;;AAKA;;AACA;;AACA;;;;AACA;;;;;;;;AACA,IAAMA,KAAK,oBAAK,GAAL,CAAX;;AAEA,IAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,MAAD,EAAY;AAC9B,QAAIC,YAAY;AACZ,aAAK,GADO;AAEZ,aAAK;AAFO,MAGdD,MAHc,CAAhB;AAIA,QAAI,CAACC,SAAL,EAAgB;AACZ,cAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACH;AACD,WAAOD,SAAP;AACH,CATD;AAUA,SAASE,QAAT,CAAkBC,OAAlB,EAA2B;AAAA,QAClBC,MADkB,GAC6BD,OAD7B,CAClBC,MADkB;AAAA,QACVC,SADU,GAC6BF,OAD7B,CACVE,SADU;AAAA,QACCC,MADD,GAC6BH,OAD7B,CACCG,MADD;AAAA,QACSC,KADT,GAC6BJ,OAD7B,CACSI,KADT;AAAA,QACgBC,SADhB,GAC6BL,OAD7B,CACgBK,SADhB;;AAEvB,+BACKJ,OAAOK,GADZ,YACiBC,IADjB,EACsB;AACd,YAAI,CAAC,iCAAkBA,IAAlB,EAAwBP,OAAxB,CAAL,EAAuC;AACnC;AACH;AACD;AACA,YAAMQ,OAAOH,UAAUE,IAAV,CAAb;AACA,YAAME,cAAcf,EAAd,yCAAN;AACA,8CAAqBc,IAArB,EAA2BC,WAA3B,EAAwCC,OAAxC,CAAgD,iBAAS;AAAA,gBAC9CC,KAD8C,GACrCC,KADqC,CAC9CD,KAD8C;;AAErDR,mBAAOI,IAAP,EAAa,IAAIL,SAAJ,CAAc,sCAAd,EAAsD;AAC/DS,uBAAOA,KADwD;AAE/DE,qBAAKT,MAAMU,gBAAN,CAAuB,CAACH,KAAD,EAAQA,QAAQ,CAAhB,CAAvB,EAA2ChB,cAAciB,MAAMJ,IAApB,CAA3C;AAF0D,aAAtD,CAAb;AAIH,SAND;AAOH,KAfL;AAiBH;kBACc;AACXO,YAAQhB,QADG;AAEXK,WAAOL;AAFI,C","file":"4.3.1.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n4.3.1.丸かっこ（）\n直前の内容を補足して説明する場合や言い換える場合に使用します。\n全角のかっこを使用します\n */\nimport {isUserWrittenNode} from \"./util/node-util\";\nimport {matchCaptureGroupAll} from \"match-index\";\nimport regx from 'regx';\nimport {japaneseRegExp} from \"./util/regexp\";\nconst rx = regx(\"g\");\n\nconst replaceSymbol = (symbol) => {\n    var newSymbol = {\n        \"(\": \"（\",\n        \")\": \"）\"\n    }[symbol];\n    if (!newSymbol) {\n        throw new Error(\"fail to replace symbol\");\n    }\n    return newSymbol;\n};\nfunction reporter(context) {\n    let {Syntax, RuleError, report, fixer, getSource} = context;\n    return {\n        [Syntax.Str](node){\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            // 半角のかっこ()は使用しないで全角のかっこを使用する\n            const text = getSource(node);\n            const matchRegExp = rx`(?:${japaneseRegExp})([\\(\\)])`;\n            matchCaptureGroupAll(text, matchRegExp).forEach(match => {\n                const {index} = match;\n                report(node, new RuleError(\"半角のかっこ()が使用されています。全角のかっこ（）を使用してください。\", {\n                    index: index,\n                    fix: fixer.replaceTextRange([index, index + 1], replaceSymbol(match.text))\n                }));\n            });\n        }\n    };\n}\nexport default {\n    linter: reporter,\n    fixer: reporter\n}"]}